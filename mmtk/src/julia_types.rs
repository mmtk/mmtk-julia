/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _SETJMP_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
pub const MAX_BUMP_ALLOCATORS: u32 = 6;
pub const MAX_LARGE_OBJECT_ALLOCATORS: u32 = 2;
pub const MAX_MALLOC_ALLOCATORS: u32 = 1;
pub const MAX_IMMIX_ALLOCATORS: u32 = 1;
pub const MAX_FREE_LIST_ALLOCATORS: u32 = 2;
pub const MAX_MARK_COMPACT_ALLOCATORS: u32 = 1;
pub const HT_N_INLINE: u32 = 32;
pub const AL_N_INLINE: u32 = 29;
pub const SMALL_AL_N_INLINE: u32 = 6;
pub const MAX_ALIGN: u32 = 4;
pub const JL_GC_N_MAX_POOLS: u32 = 51;
pub const JL_N_STACK_POOLS: u32 = 16;
pub const JL_GC_STATE_UNSAFE: u32 = 0;
pub const JL_GC_STATE_WAITING: u32 = 1;
pub const JL_GC_STATE_SAFE: u32 = 2;
pub const JL_GC_PARALLEL_COLLECTOR_THREAD: u32 = 3;
pub const JL_GC_CONCURRENT_COLLECTOR_THREAD: u32 = 4;
pub const JL_RNG_SIZE: u32 = 5;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::std::mem::MaybeUninit<sched_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcpu(
        arg1: *mut ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<cpu_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[test]
fn bindgen_test_layout_timex() {
    const UNINIT: ::std::mem::MaybeUninit<timex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timex>(),
        208usize,
        concat!("Size of: ", stringify!(timex))
    );
    assert_eq!(
        ::std::mem::align_of::<timex>(),
        8usize,
        concat!("Alignment of ", stringify!(timex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(modes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freq) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxerror) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(maxerror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esterror) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(esterror)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constant) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(constant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).precision) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(precision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tolerance) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tolerance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppsfreq) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(ppsfreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitter) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stabil) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stabil)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jitcnt) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(jitcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calcnt) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(calcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errcnt) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(errcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stbcnt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(stbcnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tai) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(timex),
            "::",
            stringify!(tai)
        )
    );
}
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_getres(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_FAST_NP: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_cleanup_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__canceltype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_tryjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_timedjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_clockjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setsigmask_np(
        __attr: *mut pthread_attr_t,
        sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getsigmask_np(
        __attr: *const pthread_attr_t,
        sigmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(
        __th: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        __target_thread: pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(
        __target_thread: pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___cancel_jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__cancel_jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__cancel_jmp_buf_tag>(),
        72usize,
        concat!("Size of: ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__cancel_jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_unwind_buf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cleanup_frame> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_class() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cleanup_class> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_class>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_class))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_class>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_class))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_class),
            "::",
            stringify!(__cancel_type)
        )
    );
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_clocklock(
        __mutex: *mut pthread_mutex_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_clockwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __clock_id: __clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub const Allocator_AllocatorDefault: Allocator = 0;
pub const Allocator_AllocatorImmortal: Allocator = 1;
pub const Allocator_AllocatorLos: Allocator = 2;
pub const Allocator_AllocatorCode: Allocator = 3;
pub const Allocator_AllocatorReadOnly: Allocator = 4;
pub type Allocator = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RustDynPtr {
    pub data: *mut ::std::os::raw::c_void,
    pub vtable: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RustDynPtr() {
    const UNINIT: ::std::mem::MaybeUninit<RustDynPtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RustDynPtr>(),
        16usize,
        concat!("Size of: ", stringify!(RustDynPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<RustDynPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(RustDynPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RustDynPtr),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RustDynPtr),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BumpAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub cursor: *mut ::std::os::raw::c_void,
    pub limit: *mut ::std::os::raw::c_void,
    pub space: RustDynPtr,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_BumpAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<BumpAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BumpAllocator>(),
        48usize,
        concat!("Size of: ", stringify!(BumpAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<BumpAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(BumpAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BumpAllocator),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BumpAllocator),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BumpAllocator),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BumpAllocator),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BumpAllocator),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LargeObjectAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_LargeObjectAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<LargeObjectAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LargeObjectAllocator>(),
        24usize,
        concat!("Size of: ", stringify!(LargeObjectAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<LargeObjectAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(LargeObjectAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LargeObjectAllocator),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LargeObjectAllocator),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LargeObjectAllocator),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImmixAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub cursor: *mut ::std::os::raw::c_void,
    pub limit: *mut ::std::os::raw::c_void,
    pub immix_space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
    pub hot: u8,
    pub copy: u8,
    pub large_cursor: *mut ::std::os::raw::c_void,
    pub large_limit: *mut ::std::os::raw::c_void,
    pub request_for_large: u8,
    pub _align: [u8; 7usize],
    pub line_opt_tag: u8,
    pub line_opt: usize,
}
#[test]
fn bindgen_test_layout_ImmixAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<ImmixAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImmixAllocator>(),
        88usize,
        concat!("Size of: ", stringify!(ImmixAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<ImmixAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(ImmixAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).immix_space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(immix_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hot) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(hot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_cursor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(large_cursor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_limit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(large_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_for_large) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(request_for_large)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._align) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(_align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_opt_tag) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(line_opt_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line_opt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImmixAllocator),
            "::",
            stringify!(line_opt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLBlock {
    pub Address: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_FLBlock() {
    const UNINIT: ::std::mem::MaybeUninit<FLBlock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FLBlock>(),
        8usize,
        concat!("Size of: ", stringify!(FLBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<FLBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(FLBlock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLBlock),
            "::",
            stringify!(Address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLBlockList {
    pub first: FLBlock,
    pub last: FLBlock,
    pub size: usize,
    pub lock: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FLBlockList() {
    const UNINIT: ::std::mem::MaybeUninit<FLBlockList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FLBlockList>(),
        32usize,
        concat!("Size of: ", stringify!(FLBlockList))
    );
    assert_eq!(
        ::std::mem::align_of::<FLBlockList>(),
        8usize,
        concat!("Alignment of ", stringify!(FLBlockList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FLBlockList),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FLBlockList),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FLBlockList),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FLBlockList),
            "::",
            stringify!(lock)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FreeListAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
    pub available_blocks: *mut FLBlockList,
    pub available_blocks_stress: *mut FLBlockList,
    pub unswept_blocks: *mut FLBlockList,
    pub consumed_blocks: *mut FLBlockList,
}
#[test]
fn bindgen_test_layout_FreeListAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<FreeListAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FreeListAllocator>(),
        56usize,
        concat!("Size of: ", stringify!(FreeListAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<FreeListAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(FreeListAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FreeListAllocator),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FreeListAllocator),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FreeListAllocator),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).available_blocks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FreeListAllocator),
            "::",
            stringify!(available_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).available_blocks_stress) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FreeListAllocator),
            "::",
            stringify!(available_blocks_stress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unswept_blocks) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FreeListAllocator),
            "::",
            stringify!(unswept_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).consumed_blocks) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FreeListAllocator),
            "::",
            stringify!(consumed_blocks)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMTkMallocAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MMTkMallocAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<MMTkMallocAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MMTkMallocAllocator>(),
        24usize,
        concat!("Size of: ", stringify!(MMTkMallocAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<MMTkMallocAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(MMTkMallocAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MMTkMallocAllocator),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MMTkMallocAllocator),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MMTkMallocAllocator),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MarkCompactAllocator {
    pub bump_allocator: BumpAllocator,
}
#[test]
fn bindgen_test_layout_MarkCompactAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<MarkCompactAllocator> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MarkCompactAllocator>(),
        48usize,
        concat!("Size of: ", stringify!(MarkCompactAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<MarkCompactAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(MarkCompactAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bump_allocator) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MarkCompactAllocator),
            "::",
            stringify!(bump_allocator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Allocators {
    pub bump_pointer: [BumpAllocator; 6usize],
    pub large_object: [LargeObjectAllocator; 2usize],
    pub malloc: [MMTkMallocAllocator; 1usize],
    pub immix: [ImmixAllocator; 1usize],
    pub free_list: [FreeListAllocator; 2usize],
    pub markcompact: [MarkCompactAllocator; 1usize],
}
#[test]
fn bindgen_test_layout_Allocators() {
    const UNINIT: ::std::mem::MaybeUninit<Allocators> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Allocators>(),
        608usize,
        concat!("Size of: ", stringify!(Allocators))
    );
    assert_eq!(
        ::std::mem::align_of::<Allocators>(),
        8usize,
        concat!("Alignment of ", stringify!(Allocators))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bump_pointer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Allocators),
            "::",
            stringify!(bump_pointer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_object) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Allocators),
            "::",
            stringify!(large_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).malloc) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(Allocators),
            "::",
            stringify!(malloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).immix) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(Allocators),
            "::",
            stringify!(immix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_list) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(Allocators),
            "::",
            stringify!(free_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).markcompact) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(Allocators),
            "::",
            stringify!(markcompact)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MutatorConfig {
    pub allocator_mapping: *mut ::std::os::raw::c_void,
    pub space_mapping: *mut ::std::os::raw::c_void,
    pub prepare_func: RustDynPtr,
    pub release_func: RustDynPtr,
}
#[test]
fn bindgen_test_layout_MutatorConfig() {
    const UNINIT: ::std::mem::MaybeUninit<MutatorConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MutatorConfig>(),
        48usize,
        concat!("Size of: ", stringify!(MutatorConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<MutatorConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(MutatorConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocator_mapping) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MutatorConfig),
            "::",
            stringify!(allocator_mapping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space_mapping) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MutatorConfig),
            "::",
            stringify!(space_mapping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prepare_func) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MutatorConfig),
            "::",
            stringify!(prepare_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_func) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MutatorConfig),
            "::",
            stringify!(release_func)
        )
    );
}
#[repr(C)]
#[repr(align(8))]
pub struct MMTkMutatorContext {
    pub _bindgen_opaque_blob: [u64; 87usize],
}
#[test]
fn bindgen_test_layout_MMTkMutatorContext() {
    assert_eq!(
        ::std::mem::size_of::<MMTkMutatorContext>(),
        696usize,
        concat!("Size of: ", stringify!(MMTkMutatorContext))
    );
    assert_eq!(
        ::std::mem::align_of::<MMTkMutatorContext>(),
        8usize,
        concat!("Alignment of ", stringify!(MMTkMutatorContext))
    );
}
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_taggedvalue_bits {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_mmtk__jl_taggedvalue_bits() {
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_taggedvalue_bits>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_taggedvalue_bits))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_taggedvalue_bits>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_taggedvalue_bits))
    );
}
impl mmtk__jl_taggedvalue_bits {
    #[inline]
    pub fn gc(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_gc(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn in_image(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_in_image(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tag(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u64) }
    }
    #[inline]
    pub fn set_tag(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        gc: usize,
        in_image: usize,
        unused: usize,
        tag: usize,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let gc: u64 = unsafe { ::std::mem::transmute(gc) };
            gc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let in_image: u64 = unsafe { ::std::mem::transmute(in_image) };
            in_image as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let unused: u64 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let tag: u64 = unsafe { ::std::mem::transmute(tag) };
            tag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_value_t {
    _unused: [u8; 0],
}
pub type mmtk_jl_value_t = mmtk__jl_value_t;
pub type mmtk_jl_taggedvalue_t = mmtk__jl_taggedvalue_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_taggedvalue_t {
    pub __bindgen_anon_1: mmtk__jl_taggedvalue_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk__jl_taggedvalue_t__bindgen_ty_1 {
    pub header: usize,
    pub next: *mut mmtk_jl_taggedvalue_t,
    pub type_: *mut mmtk_jl_value_t,
    pub bits: mmtk__jl_taggedvalue_bits,
}
#[test]
fn bindgen_test_layout_mmtk__jl_taggedvalue_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_taggedvalue_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_taggedvalue_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_taggedvalue_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(bits)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk__jl_taggedvalue_t() {
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_taggedvalue_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_taggedvalue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_taggedvalue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_taggedvalue_t))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_datatype_layout_t {
    pub size: u32,
    pub nfields: u32,
    pub npointers: u32,
    pub first_ptr: i32,
    pub alignment: u16,
    pub flags: mmtk_jl_datatype_layout_t__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_datatype_layout_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_mmtk_jl_datatype_layout_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_datatype_layout_t__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(mmtk_jl_datatype_layout_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_datatype_layout_t__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk_jl_datatype_layout_t__bindgen_ty_1)
        )
    );
}
impl mmtk_jl_datatype_layout_t__bindgen_ty_1 {
    #[inline]
    pub fn haspadding(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_haspadding(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fielddesc_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_fielddesc_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn arrayelem_isboxed(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_arrayelem_isboxed(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn arrayelem_isunion(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_arrayelem_isunion(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isbitsegal(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isbitsegal(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        haspadding: u16,
        fielddesc_type: u16,
        arrayelem_isboxed: u16,
        arrayelem_isunion: u16,
        isbitsegal: u16,
        padding: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let haspadding: u16 = unsafe { ::std::mem::transmute(haspadding) };
            haspadding as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let fielddesc_type: u16 = unsafe { ::std::mem::transmute(fielddesc_type) };
            fielddesc_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let arrayelem_isboxed: u16 = unsafe { ::std::mem::transmute(arrayelem_isboxed) };
            arrayelem_isboxed as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let arrayelem_isunion: u16 = unsafe { ::std::mem::transmute(arrayelem_isunion) };
            arrayelem_isunion as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let isbitsegal: u16 = unsafe { ::std::mem::transmute(isbitsegal) };
            isbitsegal as u64
        });
        __bindgen_bitfield_unit.set(6usize, 10u8, {
            let padding: u16 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_mmtk_jl_datatype_layout_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_datatype_layout_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_datatype_layout_t>(),
        20usize,
        concat!("Size of: ", stringify!(mmtk_jl_datatype_layout_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_datatype_layout_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mmtk_jl_datatype_layout_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nfields) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npointers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(npointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_ptr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(first_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_typename_t {
    pub name: *mut ::std::os::raw::c_void,
    pub module: *mut mmtk__jl_module_t,
    pub names: *mut ::std::os::raw::c_void,
    pub atomicfields: *const u32,
    pub constfields: *const u32,
    pub wrapper: *mut ::std::os::raw::c_void,
    pub Typeofwrapper: *mut ::std::os::raw::c_void,
    pub cache: *mut ::std::os::raw::c_void,
    pub linearcache: *mut ::std::os::raw::c_void,
    pub mt: *mut ::std::os::raw::c_void,
    pub partial: *mut ::std::os::raw::c_void,
    pub hash: isize,
    pub n_uninitialized: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub max_methods: u8,
}
#[test]
fn bindgen_test_layout_mmtk_jl_typename_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_typename_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_typename_t>(),
        104usize,
        concat!("Size of: ", stringify!(mmtk_jl_typename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_typename_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_typename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atomicfields) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(atomicfields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constfields) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(constfields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrapper) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(wrapper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Typeofwrapper) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(Typeofwrapper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearcache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(linearcache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(mt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).partial) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(partial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_uninitialized) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(n_uninitialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_methods) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(max_methods)
        )
    );
}
impl mmtk_jl_typename_t {
    #[inline]
    pub fn abstract_(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_abstract(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mutabl(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mutabl(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mayinlinealloc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mayinlinealloc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set__reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        abstract_: u8,
        mutabl: u8,
        mayinlinealloc: u8,
        _reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let abstract_: u8 = unsafe { ::std::mem::transmute(abstract_) };
            abstract_ as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mutabl: u8 = unsafe { ::std::mem::transmute(mutabl) };
            mutabl as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mayinlinealloc: u8 = unsafe { ::std::mem::transmute(mayinlinealloc) };
            mayinlinealloc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let _reserved: u8 = unsafe { ::std::mem::transmute(_reserved) };
            _reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_svec_t {
    pub length: usize,
}
#[test]
fn bindgen_test_layout_mmtk_jl_svec_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_svec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_svec_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk_jl_svec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_svec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_svec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_svec_t),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_datatype_t {
    pub name: *mut mmtk_jl_typename_t,
    pub super_: *mut mmtk__jl_datatype_t,
    pub parameters: *mut mmtk_jl_svec_t,
    pub types: *mut mmtk_jl_svec_t,
    pub instance: *mut mmtk_jl_value_t,
    pub layout: *const mmtk_jl_datatype_layout_t,
    pub hash: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[test]
fn bindgen_test_layout_mmtk__jl_datatype_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_datatype_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_datatype_t>(),
        56usize,
        concat!("Size of: ", stringify!(mmtk__jl_datatype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_datatype_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_datatype_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).super_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(hash)
        )
    );
}
impl mmtk__jl_datatype_t {
    #[inline]
    pub fn hasfreetypevars(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hasfreetypevars(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isconcretetype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isconcretetype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isdispatchtuple(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isdispatchtuple(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isbitstype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isbitstype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn zeroinit(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_zeroinit(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_concrete_subtype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_has_concrete_subtype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn maybe_subtype_of_cache(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_maybe_subtype_of_cache(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isprimitivetype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isprimitivetype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ismutationfree(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ismutationfree(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isidentityfree(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isidentityfree(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn smalltag(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_smalltag(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hasfreetypevars: u16,
        isconcretetype: u16,
        isdispatchtuple: u16,
        isbitstype: u16,
        zeroinit: u16,
        has_concrete_subtype: u16,
        maybe_subtype_of_cache: u16,
        isprimitivetype: u16,
        ismutationfree: u16,
        isidentityfree: u16,
        smalltag: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hasfreetypevars: u16 = unsafe { ::std::mem::transmute(hasfreetypevars) };
            hasfreetypevars as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let isconcretetype: u16 = unsafe { ::std::mem::transmute(isconcretetype) };
            isconcretetype as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let isdispatchtuple: u16 = unsafe { ::std::mem::transmute(isdispatchtuple) };
            isdispatchtuple as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let isbitstype: u16 = unsafe { ::std::mem::transmute(isbitstype) };
            isbitstype as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let zeroinit: u16 = unsafe { ::std::mem::transmute(zeroinit) };
            zeroinit as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_concrete_subtype: u16 = unsafe { ::std::mem::transmute(has_concrete_subtype) };
            has_concrete_subtype as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let maybe_subtype_of_cache: u16 =
                unsafe { ::std::mem::transmute(maybe_subtype_of_cache) };
            maybe_subtype_of_cache as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let isprimitivetype: u16 = unsafe { ::std::mem::transmute(isprimitivetype) };
            isprimitivetype as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ismutationfree: u16 = unsafe { ::std::mem::transmute(ismutationfree) };
            ismutationfree as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let isidentityfree: u16 = unsafe { ::std::mem::transmute(isidentityfree) };
            isidentityfree as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let smalltag: u16 = unsafe { ::std::mem::transmute(smalltag) };
            smalltag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mmtk_jl_datatype_t = mmtk__jl_datatype_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_genericmemory_t {
    pub length: usize,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mmtk_jl_genericmemory_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_genericmemory_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_genericmemory_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk_jl_genericmemory_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_genericmemory_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_genericmemory_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_genericmemory_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_genericmemory_t),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_genericmemoryref_t {
    pub ptr_or_offset: *mut ::std::os::raw::c_void,
    pub mem: *mut mmtk_jl_genericmemory_t,
}
#[test]
fn bindgen_test_layout_mmtk_jl_genericmemoryref_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_genericmemoryref_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_genericmemoryref_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk_jl_genericmemoryref_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_genericmemoryref_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_genericmemoryref_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr_or_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_genericmemoryref_t),
            "::",
            stringify!(ptr_or_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_genericmemoryref_t),
            "::",
            stringify!(mem)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct mmtk_jl_array_t {
    pub ref_: mmtk_jl_genericmemoryref_t,
    pub dimsize: __IncompleteArrayField<usize>,
}
#[test]
fn bindgen_test_layout_mmtk_jl_array_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_array_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_array_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk_jl_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_array_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_array_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(dimsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_sym_t {
    pub left: u64,
    pub right: u64,
    pub hash: usize,
}
#[test]
fn bindgen_test_layout_mmtk__jl_sym_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_sym_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_sym_t>(),
        24usize,
        concat!("Size of: ", stringify!(mmtk__jl_sym_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_sym_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_sym_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_sym_t),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_sym_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_sym_t),
            "::",
            stringify!(hash)
        )
    );
}
pub type mmtk_jl_sym_t = mmtk__jl_sym_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_binding_t {
    pub value: u64,
    pub globalref: *mut ::std::os::raw::c_void,
    pub owner: *mut mmtk__jl_binding_t,
    pub ty: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_mmtk_jl_binding_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_binding_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_binding_t>(),
        40usize,
        concat!("Size of: ", stringify!(mmtk_jl_binding_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_binding_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_binding_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalref) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(globalref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(ty)
        )
    );
}
impl mmtk_jl_binding_t {
    #[inline]
    pub fn constp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_constp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exportp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_exportp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn publicp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_publicp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn imported(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_imported(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usingfailed(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_usingfailed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deprecated(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_deprecated(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        constp: u8,
        exportp: u8,
        publicp: u8,
        imported: u8,
        usingfailed: u8,
        deprecated: u8,
        padding: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let constp: u8 = unsafe { ::std::mem::transmute(constp) };
            constp as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let exportp: u8 = unsafe { ::std::mem::transmute(exportp) };
            exportp as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let publicp: u8 = unsafe { ::std::mem::transmute(publicp) };
            publicp as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let imported: u8 = unsafe { ::std::mem::transmute(imported) };
            imported as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let usingfailed: u8 = unsafe { ::std::mem::transmute(usingfailed) };
            usingfailed as u64
        });
        __bindgen_bitfield_unit.set(5usize, 2u8, {
            let deprecated: u8 = unsafe { ::std::mem::transmute(deprecated) };
            deprecated as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let padding: u8 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_htable_t {
    pub size: usize,
    pub table: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 32usize],
}
#[test]
fn bindgen_test_layout_mmtk_htable_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_htable_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_htable_t>(),
        272usize,
        concat!("Size of: ", stringify!(mmtk_htable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_htable_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_htable_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_htable_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_htable_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_htable_t),
            "::",
            stringify!(_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_arraylist_t {
    pub len: usize,
    pub max: usize,
    pub items: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 29usize],
}
#[test]
fn bindgen_test_layout_mmtk_arraylist_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_arraylist_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_arraylist_t>(),
        256usize,
        concat!("Size of: ", stringify!(mmtk_arraylist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_arraylist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_arraylist_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_small_arraylist_t {
    pub len: u32,
    pub max: u32,
    pub items: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 6usize],
}
#[test]
fn bindgen_test_layout_mmtk_small_arraylist_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_small_arraylist_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_small_arraylist_t>(),
        64usize,
        concat!("Size of: ", stringify!(mmtk_small_arraylist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_small_arraylist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_small_arraylist_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_small_arraylist_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_small_arraylist_t),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_small_arraylist_t),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_small_arraylist_t),
            "::",
            stringify!(_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_uuid_t {
    pub hi: u64,
    pub lo: u64,
}
#[test]
fn bindgen_test_layout_mmtk_jl_uuid_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_uuid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk_jl_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_uuid_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_uuid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_uuid_t),
            "::",
            stringify!(hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_uuid_t),
            "::",
            stringify!(lo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_mutex_t {
    pub owner: u64,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_mmtk_jl_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_mutex_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk_jl_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_mutex_t),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_mutex_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_module_t {
    pub name: *mut ::std::os::raw::c_void,
    pub parent: *mut mmtk__jl_module_t,
    pub bindings: *mut u64,
    pub bindingkeyset: *mut u128,
    pub usings: mmtk_arraylist_t,
    pub build_id: mmtk_jl_uuid_t,
    pub uuid: mmtk_jl_uuid_t,
    pub counter: u32,
    pub nospecialize: i32,
    pub optlevel: i8,
    pub compile: i8,
    pub infer: i8,
    pub istopmod: u8,
    pub max_methods: i8,
    pub lock: mmtk_jl_mutex_t,
    pub hash: isize,
}
#[test]
fn bindgen_test_layout_mmtk__jl_module_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_module_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_module_t>(),
        360usize,
        concat!("Size of: ", stringify!(mmtk__jl_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_module_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindings) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingkeyset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(bindingkeyset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usings) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(usings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build_id) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(build_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nospecialize) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(nospecialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optlevel) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(optlevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compile) as usize - ptr as usize },
        329usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(compile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infer) as usize - ptr as usize },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(infer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).istopmod) as usize - ptr as usize },
        331usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(istopmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_methods) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(max_methods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(hash)
        )
    );
}
pub type mmtk_jl_module_t = mmtk__jl_module_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_excstack_t {
    pub top: usize,
    pub reserved_size: usize,
}
#[test]
fn bindgen_test_layout_mmtk__jl_excstack_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_excstack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_excstack_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk__jl_excstack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_excstack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_excstack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_excstack_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_excstack_t),
            "::",
            stringify!(reserved_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_bt_element_t {
    pub __bindgen_anon_1: mmtk__jl_bt_element_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk__jl_bt_element_t__bindgen_ty_1 {
    pub uintptr: usize,
    pub jlvalue: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mmtk__jl_bt_element_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_bt_element_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_bt_element_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_bt_element_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_bt_element_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk__jl_bt_element_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uintptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_bt_element_t__bindgen_ty_1),
            "::",
            stringify!(uintptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jlvalue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_bt_element_t__bindgen_ty_1),
            "::",
            stringify!(jlvalue)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk__jl_bt_element_t() {
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_bt_element_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_bt_element_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_bt_element_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_bt_element_t))
    );
}
pub type mmtk_jl_bt_element_t = mmtk__jl_bt_element_t;
pub type mmtk_jl_excstack_t = mmtk__jl_excstack_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_stack_context_t {
    pub uc_mcontext: sigjmp_buf,
}
#[test]
fn bindgen_test_layout_mmtk_jl_stack_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_stack_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_stack_context_t>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk_jl_stack_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_stack_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_stack_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_stack_context_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type mmtk__jl_ucontext_t = mmtk_jl_stack_context_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk_jl_ucontext_t {
    pub __bindgen_anon_1: mmtk_jl_ucontext_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk_jl_ucontext_t__bindgen_ty_1 {
    pub ctx: mmtk__jl_ucontext_t,
    pub copy_ctx: mmtk_jl_stack_context_t,
}
#[test]
fn bindgen_test_layout_mmtk_jl_ucontext_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_ucontext_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_ucontext_t__bindgen_ty_1>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk_jl_ucontext_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_ucontext_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk_jl_ucontext_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_ucontext_t__bindgen_ty_1),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_ucontext_t__bindgen_ty_1),
            "::",
            stringify!(copy_ctx)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk_jl_ucontext_t() {
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_ucontext_t>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk_jl_ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_ucontext_t))
    );
}
pub type mmtk_jl_gcframe_t = mmtk__jl_gcframe_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_gcframe_t {
    pub nroots: usize,
    pub prev: *mut mmtk__jl_gcframe_t,
}
#[test]
fn bindgen_test_layout_mmtk__jl_gcframe_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_gcframe_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_gcframe_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk__jl_gcframe_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_gcframe_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_gcframe_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nroots) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_gcframe_t),
            "::",
            stringify!(nroots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_gcframe_t),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_pool_t {
    pub freelist: *mut mmtk_jl_taggedvalue_t,
    pub newpages: *mut mmtk_jl_taggedvalue_t,
    pub osize: u16,
}
#[test]
fn bindgen_test_layout_mmtk_jl_gc_pool_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_gc_pool_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_gc_pool_t>(),
        24usize,
        concat!("Size of: ", stringify!(mmtk_jl_gc_pool_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_gc_pool_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_gc_pool_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freelist) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_pool_t),
            "::",
            stringify!(freelist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newpages) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_pool_t),
            "::",
            stringify!(newpages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).osize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_pool_t),
            "::",
            stringify!(osize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_thread_gc_num_t {
    pub allocd: u64,
    pub pool_live_bytes: u64,
    pub malloc: u64,
    pub realloc: u64,
    pub poolalloc: u64,
    pub bigalloc: u64,
    pub free_acc: u64,
    pub alloc_acc: u64,
}
#[test]
fn bindgen_test_layout_mmtk_jl_thread_gc_num_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_thread_gc_num_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_thread_gc_num_t>(),
        64usize,
        concat!("Size of: ", stringify!(mmtk_jl_thread_gc_num_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_thread_gc_num_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_thread_gc_num_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(allocd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_live_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(pool_live_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).malloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(malloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realloc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolalloc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(poolalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bigalloc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(bigalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_acc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(free_acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_acc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_gc_num_t),
            "::",
            stringify!(alloc_acc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_thread_heap_t {
    pub weak_refs: mmtk_small_arraylist_t,
    pub live_tasks: mmtk_small_arraylist_t,
    pub mallocarrays: *mut _mallocarray_t,
    pub mafreelist: *mut _mallocarray_t,
    pub big_objects: *mut _bigval_t,
    pub remset_nptr: ::std::os::raw::c_int,
    pub remset: mmtk_arraylist_t,
    pub norm_pools: [mmtk_jl_gc_pool_t; 51usize],
    pub free_stacks: [mmtk_small_arraylist_t; 16usize],
}
#[test]
fn bindgen_test_layout_mmtk_jl_thread_heap_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_thread_heap_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_thread_heap_t>(),
        2664usize,
        concat!("Size of: ", stringify!(mmtk_jl_thread_heap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_thread_heap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_thread_heap_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weak_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(weak_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).live_tasks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(live_tasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mallocarrays) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(mallocarrays)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mafreelist) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(mafreelist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).big_objects) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(big_objects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remset_nptr) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(remset_nptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remset) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(remset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).norm_pools) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(norm_pools)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_stacks) as usize - ptr as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_thread_heap_t),
            "::",
            stringify!(free_stacks)
        )
    );
}
pub type mmtk_jl_thread_t = pthread_t;
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_ws_queue_t {
    pub top: u64,
    pub __bindgen_padding_0: [u64; 7usize],
    pub bottom: u64,
    pub __bindgen_padding_1: [u64; 7usize],
    pub array: u64,
}
#[test]
fn bindgen_test_layout_mmtk_ws_queue_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_ws_queue_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_ws_queue_t>(),
        192usize,
        concat!("Size of: ", stringify!(mmtk_ws_queue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_ws_queue_t>(),
        64usize,
        concat!("Alignment of ", stringify!(mmtk_ws_queue_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_ws_queue_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_ws_queue_t),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_ws_queue_t),
            "::",
            stringify!(array)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_markqueue_t {
    pub chunk_queue: mmtk_ws_queue_t,
    pub ptr_queue: mmtk_ws_queue_t,
    pub reclaim_set: mmtk_arraylist_t,
}
#[test]
fn bindgen_test_layout_mmtk_jl_gc_markqueue_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_gc_markqueue_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_gc_markqueue_t>(),
        640usize,
        concat!("Size of: ", stringify!(mmtk_jl_gc_markqueue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_gc_markqueue_t>(),
        64usize,
        concat!("Alignment of ", stringify!(mmtk_jl_gc_markqueue_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_queue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_markqueue_t),
            "::",
            stringify!(chunk_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptr_queue) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_markqueue_t),
            "::",
            stringify!(ptr_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reclaim_set) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_markqueue_t),
            "::",
            stringify!(reclaim_set)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_page_stack_t {
    pub bottom: u64,
}
#[test]
fn bindgen_test_layout_mmtk_jl_gc_page_stack_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_gc_page_stack_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_gc_page_stack_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk_jl_gc_page_stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_gc_page_stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_gc_page_stack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_page_stack_t),
            "::",
            stringify!(bottom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_mark_cache_t {
    pub perm_scanned_bytes: usize,
    pub scanned_bytes: usize,
    pub nbig_obj: usize,
    pub big_obj: [*mut ::std::os::raw::c_void; 1024usize],
}
#[test]
fn bindgen_test_layout_mmtk_jl_gc_mark_cache_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_gc_mark_cache_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_gc_mark_cache_t>(),
        8216usize,
        concat!("Size of: ", stringify!(mmtk_jl_gc_mark_cache_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_gc_mark_cache_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_gc_mark_cache_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perm_scanned_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_mark_cache_t),
            "::",
            stringify!(perm_scanned_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scanned_bytes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_mark_cache_t),
            "::",
            stringify!(scanned_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbig_obj) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_mark_cache_t),
            "::",
            stringify!(nbig_obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).big_obj) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_mark_cache_t),
            "::",
            stringify!(big_obj)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_tls_states_t {
    pub heap: mmtk_jl_thread_heap_t,
    pub page_metadata_allocd: mmtk_jl_gc_page_stack_t,
    pub gc_num: mmtk_jl_thread_gc_num_t,
    pub __bindgen_padding_0: [u64; 2usize],
    pub mark_queue: mmtk_jl_gc_markqueue_t,
    pub gc_cache: mmtk_jl_gc_mark_cache_t,
    pub gc_sweeps_requested: u64,
    pub sweep_objs: mmtk_arraylist_t,
}
#[test]
fn bindgen_test_layout_mmtk_jl_gc_tls_states_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_gc_tls_states_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_gc_tls_states_t>(),
        11904usize,
        concat!("Size of: ", stringify!(mmtk_jl_gc_tls_states_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_gc_tls_states_t>(),
        64usize,
        concat!("Alignment of ", stringify!(mmtk_jl_gc_tls_states_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_tls_states_t),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_metadata_allocd) as usize - ptr as usize },
        2664usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_tls_states_t),
            "::",
            stringify!(page_metadata_allocd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_num) as usize - ptr as usize },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_tls_states_t),
            "::",
            stringify!(gc_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mark_queue) as usize - ptr as usize },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_tls_states_t),
            "::",
            stringify!(mark_queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_cache) as usize - ptr as usize },
        3392usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_tls_states_t),
            "::",
            stringify!(gc_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_sweeps_requested) as usize - ptr as usize },
        11608usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_tls_states_t),
            "::",
            stringify!(gc_sweeps_requested)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sweep_objs) as usize - ptr as usize },
        11616usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_gc_tls_states_t),
            "::",
            stringify!(sweep_objs)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
pub struct mmtk__jl_tls_states_t {
    pub tid: i16,
    pub threadpoolid: i8,
    pub rngseed: u64,
    pub safepoint: u64,
    pub sleep_check_state: u8,
    pub gc_state: u8,
    pub in_pure_callback: i16,
    pub in_finalizer: i16,
    pub disable_gc: i16,
    pub finalizers_inhibited: ::std::os::raw::c_int,
    pub __bindgen_padding_0: [u64; 3usize],
    pub gc_tls: mmtk_jl_gc_tls_states_t,
    pub defer_signal: sig_atomic_t,
    pub current_task: u64,
    pub next_task: *mut mmtk__jl_task_t,
    pub previous_task: *mut mmtk__jl_task_t,
    pub root_task: *mut mmtk__jl_task_t,
    pub timing_stack: *mut ::std::os::raw::c_void,
    pub stackbase: *mut ::std::os::raw::c_void,
    pub stacksize: usize,
    pub __bindgen_anon_1: mmtk__jl_tls_states_t__bindgen_ty_1,
    pub sig_exception: *mut mmtk_jl_value_t,
    pub bt_data: *mut mmtk__jl_bt_element_t,
    pub bt_size: usize,
    pub profiling_bt_buffer: *mut mmtk__jl_bt_element_t,
    pub signal_request: u32,
    pub io_wait: sig_atomic_t,
    pub signal_stack: *mut ::std::os::raw::c_void,
    pub signal_stack_size: usize,
    pub system_id: mmtk_jl_thread_t,
    pub suspend_count: u16,
    pub finalizers: mmtk_arraylist_t,
    pub previous_exception: *mut _jl_value_t,
    pub locks: mmtk_small_arraylist_t,
    pub engine_nqueued: usize,
    pub mmtk_mutator: MMTkMutatorContext,
    pub malloc_sz_since_last_poll: usize,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk__jl_tls_states_t__bindgen_ty_1 {
    pub base_ctx: mmtk__jl_ucontext_t,
    pub copy_stack_ctx: mmtk_jl_stack_context_t,
}
#[test]
fn bindgen_test_layout_mmtk__jl_tls_states_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_tls_states_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_tls_states_t__bindgen_ty_1>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk__jl_tls_states_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_tls_states_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk__jl_tls_states_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t__bindgen_ty_1),
            "::",
            stringify!(base_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_stack_ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t__bindgen_ty_1),
            "::",
            stringify!(copy_stack_ctx)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk__jl_tls_states_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_tls_states_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_tls_states_t>(),
        13376usize,
        concat!("Size of: ", stringify!(mmtk__jl_tls_states_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_tls_states_t>(),
        64usize,
        concat!("Alignment of ", stringify!(mmtk__jl_tls_states_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpoolid) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(threadpoolid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rngseed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(rngseed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).safepoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(safepoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sleep_check_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(sleep_check_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_state) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(gc_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_pure_callback) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(in_pure_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_finalizer) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(in_finalizer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disable_gc) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(disable_gc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalizers_inhibited) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(finalizers_inhibited)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc_tls) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(gc_tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defer_signal) as usize - ptr as usize },
        11968usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(defer_signal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_task) as usize - ptr as usize },
        11976usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(current_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_task) as usize - ptr as usize },
        11984usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(next_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous_task) as usize - ptr as usize },
        11992usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(previous_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_task) as usize - ptr as usize },
        12000usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(root_task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timing_stack) as usize - ptr as usize },
        12008usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(timing_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stackbase) as usize - ptr as usize },
        12016usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(stackbase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stacksize) as usize - ptr as usize },
        12024usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(stacksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig_exception) as usize - ptr as usize },
        12232usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(sig_exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bt_data) as usize - ptr as usize },
        12240usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(bt_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bt_size) as usize - ptr as usize },
        12248usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(bt_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profiling_bt_buffer) as usize - ptr as usize },
        12256usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(profiling_bt_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_request) as usize - ptr as usize },
        12264usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(signal_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_wait) as usize - ptr as usize },
        12268usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(io_wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_stack) as usize - ptr as usize },
        12272usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(signal_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal_stack_size) as usize - ptr as usize },
        12280usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(signal_stack_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_id) as usize - ptr as usize },
        12288usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(system_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        12296usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalizers) as usize - ptr as usize },
        12304usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(finalizers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous_exception) as usize - ptr as usize },
        12560usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(previous_exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locks) as usize - ptr as usize },
        12568usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(locks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engine_nqueued) as usize - ptr as usize },
        12632usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(engine_nqueued)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mmtk_mutator) as usize - ptr as usize },
        12640usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(mmtk_mutator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).malloc_sz_since_last_poll) as usize - ptr as usize },
        13336usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_tls_states_t),
            "::",
            stringify!(malloc_sz_since_last_poll)
        )
    );
}
pub type mmtk_jl_tls_states_t = mmtk__jl_tls_states_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_task_t {
    pub next: *mut ::std::os::raw::c_void,
    pub queue: *mut ::std::os::raw::c_void,
    pub tls: *mut ::std::os::raw::c_void,
    pub donenotify: *mut ::std::os::raw::c_void,
    pub result: *mut ::std::os::raw::c_void,
    pub scope: *mut ::std::os::raw::c_void,
    pub start: *mut ::std::os::raw::c_void,
    pub rngState: [u64; 5usize],
    pub _state: u8,
    pub sticky: u8,
    pub _isexception: u8,
    pub priority: u16,
    pub tid: u16,
    pub threadpoolid: i8,
    pub reentrant_timing: u8,
    pub gcstack: *mut mmtk_jl_gcframe_t,
    pub world_age: usize,
    pub ptls: *mut ::std::os::raw::c_void,
    pub excstack: *mut mmtk_jl_excstack_t,
    pub eh: *mut ::std::os::raw::c_void,
    pub ctx: mmtk_jl_ucontext_t,
    pub stkbuf: *mut ::std::os::raw::c_void,
    pub bufsz: usize,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_mmtk__jl_task_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_task_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_task_t>(),
        376usize,
        concat!("Size of: ", stringify!(mmtk__jl_task_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_task_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_task_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).donenotify) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(donenotify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rngState) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(rngState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._state) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sticky) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(sticky)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._isexception) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(_isexception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tid) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpoolid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(threadpoolid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reentrant_timing) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(reentrant_timing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcstack) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(gcstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).world_age) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(world_age)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptls) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(ptls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).excstack) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(excstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eh) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(eh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stkbuf) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(stkbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufsz) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(bufsz)
        )
    );
}
impl mmtk__jl_task_t {
    #[inline]
    pub fn copy_stack(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_copy_stack(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn started(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_started(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        copy_stack: ::std::os::raw::c_uint,
        started: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let copy_stack: u32 = unsafe { ::std::mem::transmute(copy_stack) };
            copy_stack as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let started: u32 = unsafe { ::std::mem::transmute(started) };
            started as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mmtk_jl_task_t = mmtk__jl_task_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_weakref_t {
    pub value: *mut mmtk_jl_value_t,
}
#[test]
fn bindgen_test_layout_mmtk_jl_weakref_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_weakref_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_weakref_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk_jl_weakref_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_weakref_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_weakref_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_weakref_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk___jl_purity_overrides_t {
    pub overrides: mmtk___jl_purity_overrides_t__bindgen_ty_1,
    pub bits: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk___jl_purity_overrides_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_mmtk___jl_purity_overrides_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mmtk___jl_purity_overrides_t__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(mmtk___jl_purity_overrides_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk___jl_purity_overrides_t__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk___jl_purity_overrides_t__bindgen_ty_1)
        )
    );
}
impl mmtk___jl_purity_overrides_t__bindgen_ty_1 {
    #[inline]
    pub fn ipo_consistent(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_consistent(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_effect_free(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_effect_free(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_nothrow(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_nothrow(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_terminates_globally(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_terminates_globally(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_terminates_locally(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_terminates_locally(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_notaskstate(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_notaskstate(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_inaccessiblememonly(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_inaccessiblememonly(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_noub(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_noub(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_noub_if_noinbounds(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_noub_if_noinbounds(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_consistent_overlay(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_consistent_overlay(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ipo_consistent: u16,
        ipo_effect_free: u16,
        ipo_nothrow: u16,
        ipo_terminates_globally: u16,
        ipo_terminates_locally: u16,
        ipo_notaskstate: u16,
        ipo_inaccessiblememonly: u16,
        ipo_noub: u16,
        ipo_noub_if_noinbounds: u16,
        ipo_consistent_overlay: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ipo_consistent: u16 = unsafe { ::std::mem::transmute(ipo_consistent) };
            ipo_consistent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ipo_effect_free: u16 = unsafe { ::std::mem::transmute(ipo_effect_free) };
            ipo_effect_free as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ipo_nothrow: u16 = unsafe { ::std::mem::transmute(ipo_nothrow) };
            ipo_nothrow as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ipo_terminates_globally: u16 =
                unsafe { ::std::mem::transmute(ipo_terminates_globally) };
            ipo_terminates_globally as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ipo_terminates_locally: u16 =
                unsafe { ::std::mem::transmute(ipo_terminates_locally) };
            ipo_terminates_locally as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ipo_notaskstate: u16 = unsafe { ::std::mem::transmute(ipo_notaskstate) };
            ipo_notaskstate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ipo_inaccessiblememonly: u16 =
                unsafe { ::std::mem::transmute(ipo_inaccessiblememonly) };
            ipo_inaccessiblememonly as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ipo_noub: u16 = unsafe { ::std::mem::transmute(ipo_noub) };
            ipo_noub as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ipo_noub_if_noinbounds: u16 =
                unsafe { ::std::mem::transmute(ipo_noub_if_noinbounds) };
            ipo_noub_if_noinbounds as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ipo_consistent_overlay: u16 =
                unsafe { ::std::mem::transmute(ipo_consistent_overlay) };
            ipo_consistent_overlay as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_mmtk___jl_purity_overrides_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk___jl_purity_overrides_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk___jl_purity_overrides_t>(),
        2usize,
        concat!("Size of: ", stringify!(mmtk___jl_purity_overrides_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk___jl_purity_overrides_t>(),
        2usize,
        concat!("Alignment of ", stringify!(mmtk___jl_purity_overrides_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overrides) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk___jl_purity_overrides_t),
            "::",
            stringify!(overrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk___jl_purity_overrides_t),
            "::",
            stringify!(bits)
        )
    );
}
pub type mmtk__jl_purity_overrides_t = mmtk___jl_purity_overrides_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_method_t {
    pub name: *mut ::std::os::raw::c_void,
    pub module: *mut mmtk__jl_module_t,
    pub file: *mut ::std::os::raw::c_void,
    pub line: i32,
    pub primary_world: usize,
    pub deleted_world: usize,
    pub sig: *mut ::std::os::raw::c_void,
    pub specializations: u64,
    pub speckeyset: u64,
    pub slot_syms: *mut ::std::os::raw::c_void,
    pub external_mt: *mut ::std::os::raw::c_void,
    pub source: *mut ::std::os::raw::c_void,
    pub debuginfo: *mut ::std::os::raw::c_void,
    pub unspecialized: u64,
    pub generator: *mut ::std::os::raw::c_void,
    pub roots: *mut ::std::os::raw::c_void,
    pub root_blocks: *mut ::std::os::raw::c_void,
    pub nroots_sysimg: i32,
    pub ccallable: *mut ::std::os::raw::c_void,
    pub invokes: u64,
    pub recursion_relation: *mut ::std::os::raw::c_void,
    pub nargs: u32,
    pub called: u32,
    pub nospecialize: u32,
    pub nkw: u32,
    pub isva: u8,
    pub is_for_opaque_closure: u8,
    pub nospecializeinfer: u8,
    pub constprop: u8,
    pub max_varargs: u8,
    pub purity: mmtk__jl_purity_overrides_t,
    pub writelock: mmtk_jl_mutex_t,
}
#[test]
fn bindgen_test_layout_mmtk__jl_method_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_method_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_method_t>(),
        208usize,
        concat!("Size of: ", stringify!(mmtk__jl_method_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_method_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_method_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary_world) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(primary_world)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleted_world) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(deleted_world)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specializations) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(specializations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speckeyset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(speckeyset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_syms) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(slot_syms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_mt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(external_mt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debuginfo) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(debuginfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unspecialized) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(unspecialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generator) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(generator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roots) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(roots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_blocks) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(root_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nroots_sysimg) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nroots_sysimg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccallable) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(ccallable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invokes) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(invokes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recursion_relation) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(recursion_relation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nargs) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).called) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(called)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nospecialize) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nospecialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nkw) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nkw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isva) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(isva)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_for_opaque_closure) as usize - ptr as usize },
        185usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(is_for_opaque_closure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nospecializeinfer) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nospecializeinfer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constprop) as usize - ptr as usize },
        187usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(constprop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_varargs) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(max_varargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purity) as usize - ptr as usize },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(purity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writelock) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(writelock)
        )
    );
}
pub type mmtk_jl_method_t = mmtk__jl_method_t;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_null_tag: mmtk_jl_small_typeof_tags = 0;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_typeofbottom_tag: mmtk_jl_small_typeof_tags = 1;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_datatype_tag: mmtk_jl_small_typeof_tags = 2;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_unionall_tag: mmtk_jl_small_typeof_tags = 3;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uniontype_tag: mmtk_jl_small_typeof_tags = 4;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_vararg_tag: mmtk_jl_small_typeof_tags = 5;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_tvar_tag: mmtk_jl_small_typeof_tags = 6;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_symbol_tag: mmtk_jl_small_typeof_tags = 7;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_module_tag: mmtk_jl_small_typeof_tags = 8;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_simplevector_tag: mmtk_jl_small_typeof_tags = 9;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_string_tag: mmtk_jl_small_typeof_tags = 10;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_task_tag: mmtk_jl_small_typeof_tags = 11;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_bool_tag: mmtk_jl_small_typeof_tags = 12;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_char_tag: mmtk_jl_small_typeof_tags = 13;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int16_tag: mmtk_jl_small_typeof_tags = 14;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int32_tag: mmtk_jl_small_typeof_tags = 15;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int64_tag: mmtk_jl_small_typeof_tags = 16;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int8_tag: mmtk_jl_small_typeof_tags = 17;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint16_tag: mmtk_jl_small_typeof_tags = 18;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint32_tag: mmtk_jl_small_typeof_tags = 19;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint64_tag: mmtk_jl_small_typeof_tags = 20;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint8_tag: mmtk_jl_small_typeof_tags = 21;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_tags_count: mmtk_jl_small_typeof_tags = 22;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_bitstags_first: mmtk_jl_small_typeof_tags = 13;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_max_tags: mmtk_jl_small_typeof_tags = 64;
pub type mmtk_jl_small_typeof_tags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_binding_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mallocarray_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bigval_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jl_value_t {
    pub _address: u8,
}
