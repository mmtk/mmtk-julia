/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _SETJMP_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const HT_N_INLINE: u32 = 32;
pub const AL_N_INLINE: u32 = 29;
pub const MAX_ALIGN: u32 = 4;
pub const JL_RNG_SIZE: u32 = 5;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_taggedvalue_bits {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_mmtk__jl_taggedvalue_bits() {
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_taggedvalue_bits>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_taggedvalue_bits))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_taggedvalue_bits>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_taggedvalue_bits))
    );
}
impl mmtk__jl_taggedvalue_bits {
    #[inline]
    pub fn gc(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_gc(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn in_image(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_in_image(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tag(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u64) }
    }
    #[inline]
    pub fn set_tag(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        gc: usize,
        in_image: usize,
        unused: usize,
        tag: usize,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let gc: u64 = unsafe { ::std::mem::transmute(gc) };
            gc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let in_image: u64 = unsafe { ::std::mem::transmute(in_image) };
            in_image as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let unused: u64 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let tag: u64 = unsafe { ::std::mem::transmute(tag) };
            tag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_value_t {
    _unused: [u8; 0],
}
pub type mmtk_jl_value_t = mmtk__jl_value_t;
pub type mmtk_jl_taggedvalue_t = mmtk__jl_taggedvalue_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_taggedvalue_t {
    pub __bindgen_anon_1: mmtk__jl_taggedvalue_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk__jl_taggedvalue_t__bindgen_ty_1 {
    pub header: usize,
    pub next: *mut mmtk_jl_taggedvalue_t,
    pub type_: *mut mmtk_jl_value_t,
    pub bits: mmtk__jl_taggedvalue_bits,
}
#[test]
fn bindgen_test_layout_mmtk__jl_taggedvalue_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_taggedvalue_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_taggedvalue_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_taggedvalue_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_taggedvalue_t__bindgen_ty_1),
            "::",
            stringify!(bits)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk__jl_taggedvalue_t() {
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_taggedvalue_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_taggedvalue_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_taggedvalue_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_taggedvalue_t))
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_array_flags_t {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_mmtk_jl_array_flags_t() {
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_array_flags_t>(),
        2usize,
        concat!("Size of: ", stringify!(mmtk_jl_array_flags_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_array_flags_t>(),
        2usize,
        concat!("Alignment of ", stringify!(mmtk_jl_array_flags_t))
    );
}
impl mmtk_jl_array_flags_t {
    #[inline]
    pub fn how(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_how(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ndims(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_ndims(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn pooled(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_pooled(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ptrarray(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ptrarray(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hasptr(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hasptr(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isshared(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isshared(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isaligned(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isaligned(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        how: ::std::os::raw::c_ushort,
        ndims: ::std::os::raw::c_ushort,
        pooled: ::std::os::raw::c_ushort,
        ptrarray: ::std::os::raw::c_ushort,
        hasptr: ::std::os::raw::c_ushort,
        isshared: ::std::os::raw::c_ushort,
        isaligned: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let how: u16 = unsafe { ::std::mem::transmute(how) };
            how as u64
        });
        __bindgen_bitfield_unit.set(2usize, 9u8, {
            let ndims: u16 = unsafe { ::std::mem::transmute(ndims) };
            ndims as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let pooled: u16 = unsafe { ::std::mem::transmute(pooled) };
            pooled as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ptrarray: u16 = unsafe { ::std::mem::transmute(ptrarray) };
            ptrarray as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let hasptr: u16 = unsafe { ::std::mem::transmute(hasptr) };
            hasptr as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let isshared: u16 = unsafe { ::std::mem::transmute(isshared) };
            isshared as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let isaligned: u16 = unsafe { ::std::mem::transmute(isaligned) };
            isaligned as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_datatype_layout_t {
    pub size: u32,
    pub nfields: u32,
    pub npointers: u32,
    pub first_ptr: i32,
    pub alignment: u16,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_mmtk_jl_datatype_layout_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_datatype_layout_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_datatype_layout_t>(),
        20usize,
        concat!("Size of: ", stringify!(mmtk_jl_datatype_layout_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_datatype_layout_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mmtk_jl_datatype_layout_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nfields) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npointers) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(npointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_ptr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(first_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_datatype_layout_t),
            "::",
            stringify!(alignment)
        )
    );
}
impl mmtk_jl_datatype_layout_t {
    #[inline]
    pub fn haspadding(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_haspadding(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fielddesc_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_fielddesc_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 13u8) as u16) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        haspadding: u16,
        fielddesc_type: u16,
        padding: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let haspadding: u16 = unsafe { ::std::mem::transmute(haspadding) };
            haspadding as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let fielddesc_type: u16 = unsafe { ::std::mem::transmute(fielddesc_type) };
            fielddesc_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 13u8, {
            let padding: u16 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_typename_t {
    pub name: *mut ::std::os::raw::c_void,
    pub module: *mut mmtk__jl_module_t,
    pub names: *mut ::std::os::raw::c_void,
    pub atomicfields: *const u32,
    pub constfields: *const u32,
    pub wrapper: *mut ::std::os::raw::c_void,
    pub Typeofwrapper: *mut ::std::os::raw::c_void,
    pub cache: *mut ::std::os::raw::c_void,
    pub linearcache: *mut ::std::os::raw::c_void,
    pub mt: *mut ::std::os::raw::c_void,
    pub partial: *mut ::std::os::raw::c_void,
    pub hash: isize,
    pub n_uninitialized: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub max_methods: u8,
}
#[test]
fn bindgen_test_layout_mmtk_jl_typename_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_typename_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_typename_t>(),
        104usize,
        concat!("Size of: ", stringify!(mmtk_jl_typename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_typename_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_typename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atomicfields) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(atomicfields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constfields) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(constfields)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrapper) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(wrapper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Typeofwrapper) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(Typeofwrapper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearcache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(linearcache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(mt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).partial) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(partial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_uninitialized) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(n_uninitialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_methods) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_typename_t),
            "::",
            stringify!(max_methods)
        )
    );
}
impl mmtk_jl_typename_t {
    #[inline]
    pub fn abstract_(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_abstract(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mutabl(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mutabl(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mayinlinealloc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mayinlinealloc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set__reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        abstract_: u8,
        mutabl: u8,
        mayinlinealloc: u8,
        _reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let abstract_: u8 = unsafe { ::std::mem::transmute(abstract_) };
            abstract_ as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mutabl: u8 = unsafe { ::std::mem::transmute(mutabl) };
            mutabl as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mayinlinealloc: u8 = unsafe { ::std::mem::transmute(mayinlinealloc) };
            mayinlinealloc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let _reserved: u8 = unsafe { ::std::mem::transmute(_reserved) };
            _reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_svec_t {
    pub length: usize,
}
#[test]
fn bindgen_test_layout_mmtk_jl_svec_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_svec_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_svec_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk_jl_svec_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_svec_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_svec_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_svec_t),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_datatype_t {
    pub name: *mut mmtk_jl_typename_t,
    pub super_: *mut mmtk__jl_datatype_t,
    pub parameters: *mut mmtk_jl_svec_t,
    pub types: *mut mmtk_jl_svec_t,
    pub instance: *mut mmtk_jl_value_t,
    pub layout: *const mmtk_jl_datatype_layout_t,
    pub hash: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[test]
fn bindgen_test_layout_mmtk__jl_datatype_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_datatype_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_datatype_t>(),
        56usize,
        concat!("Size of: ", stringify!(mmtk__jl_datatype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_datatype_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_datatype_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).super_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instance) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_datatype_t),
            "::",
            stringify!(hash)
        )
    );
}
impl mmtk__jl_datatype_t {
    #[inline]
    pub fn hasfreetypevars(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hasfreetypevars(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isconcretetype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isconcretetype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isdispatchtuple(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isdispatchtuple(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isbitstype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isbitstype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn zeroinit(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_zeroinit(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_concrete_subtype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_has_concrete_subtype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn maybe_subtype_of_cache(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_maybe_subtype_of_cache(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isprimitivetype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isprimitivetype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ismutationfree(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ismutationfree(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isidentityfree(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isidentityfree(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn smalltag(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_smalltag(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hasfreetypevars: u16,
        isconcretetype: u16,
        isdispatchtuple: u16,
        isbitstype: u16,
        zeroinit: u16,
        has_concrete_subtype: u16,
        maybe_subtype_of_cache: u16,
        isprimitivetype: u16,
        ismutationfree: u16,
        isidentityfree: u16,
        smalltag: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hasfreetypevars: u16 = unsafe { ::std::mem::transmute(hasfreetypevars) };
            hasfreetypevars as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let isconcretetype: u16 = unsafe { ::std::mem::transmute(isconcretetype) };
            isconcretetype as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let isdispatchtuple: u16 = unsafe { ::std::mem::transmute(isdispatchtuple) };
            isdispatchtuple as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let isbitstype: u16 = unsafe { ::std::mem::transmute(isbitstype) };
            isbitstype as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let zeroinit: u16 = unsafe { ::std::mem::transmute(zeroinit) };
            zeroinit as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_concrete_subtype: u16 = unsafe { ::std::mem::transmute(has_concrete_subtype) };
            has_concrete_subtype as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let maybe_subtype_of_cache: u16 =
                unsafe { ::std::mem::transmute(maybe_subtype_of_cache) };
            maybe_subtype_of_cache as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let isprimitivetype: u16 = unsafe { ::std::mem::transmute(isprimitivetype) };
            isprimitivetype as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ismutationfree: u16 = unsafe { ::std::mem::transmute(ismutationfree) };
            ismutationfree as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let isidentityfree: u16 = unsafe { ::std::mem::transmute(isidentityfree) };
            isidentityfree as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let smalltag: u16 = unsafe { ::std::mem::transmute(smalltag) };
            smalltag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mmtk_jl_datatype_t = mmtk__jl_datatype_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk_jl_array_t {
    pub data: *mut ::std::os::raw::c_void,
    pub length: usize,
    pub flags: mmtk_jl_array_flags_t,
    pub elsize: u16,
    pub offset: u32,
    pub nrows: usize,
    pub __bindgen_anon_1: mmtk_jl_array_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk_jl_array_t__bindgen_ty_1 {
    pub maxsize: usize,
    pub ncols: usize,
}
#[test]
fn bindgen_test_layout_mmtk_jl_array_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_array_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_array_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk_jl_array_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_array_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_array_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t__bindgen_ty_1),
            "::",
            stringify!(maxsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncols) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t__bindgen_ty_1),
            "::",
            stringify!(ncols)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk_jl_array_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_array_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_array_t>(),
        40usize,
        concat!("Size of: ", stringify!(mmtk_jl_array_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_array_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_array_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elsize) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(elsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nrows) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_array_t),
            "::",
            stringify!(nrows)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_sym_t {
    pub left: u64,
    pub right: u64,
    pub hash: usize,
}
#[test]
fn bindgen_test_layout_mmtk__jl_sym_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_sym_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_sym_t>(),
        24usize,
        concat!("Size of: ", stringify!(mmtk__jl_sym_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_sym_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_sym_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_sym_t),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_sym_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_sym_t),
            "::",
            stringify!(hash)
        )
    );
}
pub type mmtk_jl_sym_t = mmtk__jl_sym_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_binding_t {
    pub value: u64,
    pub globalref: *mut ::std::os::raw::c_void,
    pub owner: *mut mmtk__jl_binding_t,
    pub ty: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_mmtk_jl_binding_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_binding_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_binding_t>(),
        40usize,
        concat!("Size of: ", stringify!(mmtk_jl_binding_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_binding_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_binding_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalref) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(globalref)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_binding_t),
            "::",
            stringify!(ty)
        )
    );
}
impl mmtk_jl_binding_t {
    #[inline]
    pub fn constp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_constp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exportp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_exportp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn imported(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_imported(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn usingfailed(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_usingfailed(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deprecated(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_deprecated(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        constp: u8,
        exportp: u8,
        imported: u8,
        usingfailed: u8,
        deprecated: u8,
        padding: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let constp: u8 = unsafe { ::std::mem::transmute(constp) };
            constp as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let exportp: u8 = unsafe { ::std::mem::transmute(exportp) };
            exportp as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let imported: u8 = unsafe { ::std::mem::transmute(imported) };
            imported as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let usingfailed: u8 = unsafe { ::std::mem::transmute(usingfailed) };
            usingfailed as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let deprecated: u8 = unsafe { ::std::mem::transmute(deprecated) };
            deprecated as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let padding: u8 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_htable_t {
    pub size: usize,
    pub table: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 32usize],
}
#[test]
fn bindgen_test_layout_mmtk_htable_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_htable_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_htable_t>(),
        272usize,
        concat!("Size of: ", stringify!(mmtk_htable_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_htable_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_htable_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_htable_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_htable_t),
            "::",
            stringify!(table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._space) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_htable_t),
            "::",
            stringify!(_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_arraylist_t {
    pub len: usize,
    pub max: usize,
    pub items: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 29usize],
}
#[test]
fn bindgen_test_layout_mmtk_arraylist_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_arraylist_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_arraylist_t>(),
        256usize,
        concat!("Size of: ", stringify!(mmtk_arraylist_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_arraylist_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_arraylist_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._space) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_arraylist_t),
            "::",
            stringify!(_space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_uuid_t {
    pub hi: u64,
    pub lo: u64,
}
#[test]
fn bindgen_test_layout_mmtk_jl_uuid_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_uuid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk_jl_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_uuid_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_uuid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_uuid_t),
            "::",
            stringify!(hi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_uuid_t),
            "::",
            stringify!(lo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_mutex_t {
    pub owner: u64,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_mmtk_jl_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_mutex_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk_jl_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_mutex_t),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_mutex_t),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_module_t {
    pub name: *mut ::std::os::raw::c_void,
    pub parent: *mut mmtk__jl_module_t,
    pub bindings: *mut mmtk_jl_svec_t,
    pub bindingkeyset: *mut mmtk_jl_array_t,
    pub usings: mmtk_arraylist_t,
    pub build_id: mmtk_jl_uuid_t,
    pub uuid: mmtk_jl_uuid_t,
    pub primary_world: usize,
    pub counter: u32,
    pub nospecialize: i32,
    pub optlevel: i8,
    pub compile: i8,
    pub infer: i8,
    pub istopmod: u8,
    pub max_methods: i8,
    pub lock: mmtk_jl_mutex_t,
    pub hash: isize,
}
#[test]
fn bindgen_test_layout_mmtk__jl_module_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_module_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_module_t>(),
        368usize,
        concat!("Size of: ", stringify!(mmtk__jl_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_module_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindings) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingkeyset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(bindingkeyset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usings) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(usings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).build_id) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(build_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary_world) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(primary_world)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(counter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nospecialize) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(nospecialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optlevel) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(optlevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compile) as usize - ptr as usize },
        337usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(compile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infer) as usize - ptr as usize },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(infer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).istopmod) as usize - ptr as usize },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(istopmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_methods) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(max_methods)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_module_t),
            "::",
            stringify!(hash)
        )
    );
}
pub type mmtk_jl_module_t = mmtk__jl_module_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_excstack_t {
    pub top: usize,
    pub reserved_size: usize,
}
#[test]
fn bindgen_test_layout_mmtk__jl_excstack_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_excstack_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_excstack_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk__jl_excstack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_excstack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_excstack_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_excstack_t),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_excstack_t),
            "::",
            stringify!(reserved_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_bt_element_t {
    pub __bindgen_anon_1: mmtk__jl_bt_element_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk__jl_bt_element_t__bindgen_ty_1 {
    pub uintptr: usize,
    pub jlvalue: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_mmtk__jl_bt_element_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_bt_element_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_bt_element_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_bt_element_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_bt_element_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk__jl_bt_element_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uintptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_bt_element_t__bindgen_ty_1),
            "::",
            stringify!(uintptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jlvalue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_bt_element_t__bindgen_ty_1),
            "::",
            stringify!(jlvalue)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk__jl_bt_element_t() {
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_bt_element_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk__jl_bt_element_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_bt_element_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_bt_element_t))
    );
}
pub type mmtk_jl_bt_element_t = mmtk__jl_bt_element_t;
pub type mmtk_jl_excstack_t = mmtk__jl_excstack_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_stack_context_t {
    pub uc_mcontext: sigjmp_buf,
}
#[test]
fn bindgen_test_layout_mmtk_jl_stack_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_stack_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_stack_context_t>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk_jl_stack_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_stack_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_stack_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_stack_context_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type mmtk__jl_ucontext_t = mmtk_jl_stack_context_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk_jl_ucontext_t {
    pub __bindgen_anon_1: mmtk_jl_ucontext_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk_jl_ucontext_t__bindgen_ty_1 {
    pub ctx: mmtk__jl_ucontext_t,
    pub copy_ctx: mmtk_jl_stack_context_t,
}
#[test]
fn bindgen_test_layout_mmtk_jl_ucontext_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_ucontext_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_ucontext_t__bindgen_ty_1>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk_jl_ucontext_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_ucontext_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk_jl_ucontext_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_ucontext_t__bindgen_ty_1),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_ucontext_t__bindgen_ty_1),
            "::",
            stringify!(copy_ctx)
        )
    );
}
#[test]
fn bindgen_test_layout_mmtk_jl_ucontext_t() {
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_ucontext_t>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk_jl_ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_ucontext_t))
    );
}
pub type mmtk_jl_gcframe_t = mmtk__jl_gcframe_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_gcframe_t {
    pub nroots: usize,
    pub prev: *mut mmtk__jl_gcframe_t,
}
#[test]
fn bindgen_test_layout_mmtk__jl_gcframe_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_gcframe_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_gcframe_t>(),
        16usize,
        concat!("Size of: ", stringify!(mmtk__jl_gcframe_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_gcframe_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_gcframe_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nroots) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_gcframe_t),
            "::",
            stringify!(nroots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_gcframe_t),
            "::",
            stringify!(prev)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_task_t {
    pub next: *mut ::std::os::raw::c_void,
    pub queue: *mut ::std::os::raw::c_void,
    pub tls: *mut ::std::os::raw::c_void,
    pub donenotify: *mut ::std::os::raw::c_void,
    pub result: *mut ::std::os::raw::c_void,
    pub logstate: *mut ::std::os::raw::c_void,
    pub start: *mut ::std::os::raw::c_void,
    pub rngState: [u64; 5usize],
    pub _state: u8,
    pub sticky: u8,
    pub _isexception: u8,
    pub priority: u16,
    pub tid: u16,
    pub threadpoolid: i8,
    pub reentrant_timing: u8,
    pub gcstack: *mut mmtk_jl_gcframe_t,
    pub world_age: usize,
    pub ptls: *mut ::std::os::raw::c_void,
    pub excstack: *mut mmtk_jl_excstack_t,
    pub eh: *mut ::std::os::raw::c_void,
    pub ctx: mmtk_jl_ucontext_t,
    pub stkbuf: *mut ::std::os::raw::c_void,
    pub bufsz: usize,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_mmtk__jl_task_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_task_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_task_t>(),
        376usize,
        concat!("Size of: ", stringify!(mmtk__jl_task_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_task_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_task_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).donenotify) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(donenotify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logstate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(logstate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rngState) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(rngState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._state) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sticky) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(sticky)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._isexception) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(_isexception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tid) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(tid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threadpoolid) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(threadpoolid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reentrant_timing) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(reentrant_timing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gcstack) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(gcstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).world_age) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(world_age)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptls) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(ptls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).excstack) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(excstack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eh) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(eh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stkbuf) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(stkbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufsz) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_task_t),
            "::",
            stringify!(bufsz)
        )
    );
}
impl mmtk__jl_task_t {
    #[inline]
    pub fn copy_stack(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_copy_stack(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn started(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_started(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        copy_stack: ::std::os::raw::c_uint,
        started: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let copy_stack: u32 = unsafe { ::std::mem::transmute(copy_stack) };
            copy_stack as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let started: u32 = unsafe { ::std::mem::transmute(started) };
            started as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mmtk_jl_task_t = mmtk__jl_task_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_weakref_t {
    pub value: *mut mmtk_jl_value_t,
}
#[test]
fn bindgen_test_layout_mmtk_jl_weakref_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk_jl_weakref_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk_jl_weakref_t>(),
        8usize,
        concat!("Size of: ", stringify!(mmtk_jl_weakref_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk_jl_weakref_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk_jl_weakref_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk_jl_weakref_t),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk___jl_purity_overrides_t {
    pub overrides: mmtk___jl_purity_overrides_t__bindgen_ty_1,
    pub bits: u8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk___jl_purity_overrides_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_mmtk___jl_purity_overrides_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mmtk___jl_purity_overrides_t__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(mmtk___jl_purity_overrides_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk___jl_purity_overrides_t__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(mmtk___jl_purity_overrides_t__bindgen_ty_1)
        )
    );
}
impl mmtk___jl_purity_overrides_t__bindgen_ty_1 {
    #[inline]
    pub fn ipo_consistent(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipo_consistent(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_effect_free(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipo_effect_free(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_nothrow(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipo_nothrow(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_terminates_globally(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipo_terminates_globally(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_terminates_locally(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipo_terminates_locally(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_notaskstate(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipo_notaskstate(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_inaccessiblememonly(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ipo_inaccessiblememonly(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ipo_consistent: u8,
        ipo_effect_free: u8,
        ipo_nothrow: u8,
        ipo_terminates_globally: u8,
        ipo_terminates_locally: u8,
        ipo_notaskstate: u8,
        ipo_inaccessiblememonly: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ipo_consistent: u8 = unsafe { ::std::mem::transmute(ipo_consistent) };
            ipo_consistent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ipo_effect_free: u8 = unsafe { ::std::mem::transmute(ipo_effect_free) };
            ipo_effect_free as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ipo_nothrow: u8 = unsafe { ::std::mem::transmute(ipo_nothrow) };
            ipo_nothrow as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ipo_terminates_globally: u8 =
                unsafe { ::std::mem::transmute(ipo_terminates_globally) };
            ipo_terminates_globally as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ipo_terminates_locally: u8 =
                unsafe { ::std::mem::transmute(ipo_terminates_locally) };
            ipo_terminates_locally as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ipo_notaskstate: u8 = unsafe { ::std::mem::transmute(ipo_notaskstate) };
            ipo_notaskstate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ipo_inaccessiblememonly: u8 =
                unsafe { ::std::mem::transmute(ipo_inaccessiblememonly) };
            ipo_inaccessiblememonly as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_mmtk___jl_purity_overrides_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk___jl_purity_overrides_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk___jl_purity_overrides_t>(),
        1usize,
        concat!("Size of: ", stringify!(mmtk___jl_purity_overrides_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk___jl_purity_overrides_t>(),
        1usize,
        concat!("Alignment of ", stringify!(mmtk___jl_purity_overrides_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overrides) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk___jl_purity_overrides_t),
            "::",
            stringify!(overrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk___jl_purity_overrides_t),
            "::",
            stringify!(bits)
        )
    );
}
pub type mmtk__jl_purity_overrides_t = mmtk___jl_purity_overrides_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_method_t {
    pub name: *mut ::std::os::raw::c_void,
    pub module: *mut mmtk__jl_module_t,
    pub file: *mut ::std::os::raw::c_void,
    pub line: i32,
    pub primary_world: usize,
    pub deleted_world: usize,
    pub sig: *mut ::std::os::raw::c_void,
    pub specializations: u64,
    pub speckeyset: u64,
    pub slot_syms: *mut ::std::os::raw::c_void,
    pub external_mt: *mut ::std::os::raw::c_void,
    pub source: *mut ::std::os::raw::c_void,
    pub unspecialized: u64,
    pub generator: *mut ::std::os::raw::c_void,
    pub roots: *mut ::std::os::raw::c_void,
    pub root_blocks: *mut ::std::os::raw::c_void,
    pub nroots_sysimg: i32,
    pub ccallable: *mut ::std::os::raw::c_void,
    pub invokes: u64,
    pub recursion_relation: *mut ::std::os::raw::c_void,
    pub nargs: u32,
    pub called: u32,
    pub nospecialize: u32,
    pub nkw: u32,
    pub isva: u8,
    pub is_for_opaque_closure: u8,
    pub constprop: u8,
    pub max_varargs: u8,
    pub purity: mmtk__jl_purity_overrides_t,
    pub writelock: mmtk_jl_mutex_t,
}
#[test]
fn bindgen_test_layout_mmtk__jl_method_t() {
    const UNINIT: ::std::mem::MaybeUninit<mmtk__jl_method_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mmtk__jl_method_t>(),
        200usize,
        concat!("Size of: ", stringify!(mmtk__jl_method_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mmtk__jl_method_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mmtk__jl_method_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primary_world) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(primary_world)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleted_world) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(deleted_world)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sig) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specializations) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(specializations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speckeyset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(speckeyset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_syms) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(slot_syms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_mt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(external_mt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unspecialized) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(unspecialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generator) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(generator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roots) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(roots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root_blocks) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(root_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nroots_sysimg) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nroots_sysimg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccallable) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(ccallable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invokes) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(invokes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recursion_relation) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(recursion_relation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nargs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).called) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(called)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nospecialize) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nospecialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nkw) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(nkw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isva) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(isva)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_for_opaque_closure) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(is_for_opaque_closure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constprop) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(constprop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_varargs) as usize - ptr as usize },
        179usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(max_varargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purity) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(purity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writelock) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mmtk__jl_method_t),
            "::",
            stringify!(writelock)
        )
    );
}
pub type mmtk_jl_method_t = mmtk__jl_method_t;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_null_tag: mmtk_jlsmall_typeof_tags = 0;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_typeofbottom_tag: mmtk_jlsmall_typeof_tags = 1;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_datatype_tag: mmtk_jlsmall_typeof_tags = 2;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_unionall_tag: mmtk_jlsmall_typeof_tags = 3;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_uniontype_tag: mmtk_jlsmall_typeof_tags = 4;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_vararg_tag: mmtk_jlsmall_typeof_tags = 5;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_tvar_tag: mmtk_jlsmall_typeof_tags = 6;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_symbol_tag: mmtk_jlsmall_typeof_tags = 7;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_module_tag: mmtk_jlsmall_typeof_tags = 8;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_simplevector_tag: mmtk_jlsmall_typeof_tags = 9;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_string_tag: mmtk_jlsmall_typeof_tags = 10;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_task_tag: mmtk_jlsmall_typeof_tags = 11;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_bool_tag: mmtk_jlsmall_typeof_tags = 12;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_char_tag: mmtk_jlsmall_typeof_tags = 13;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_int16_tag: mmtk_jlsmall_typeof_tags = 14;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_int32_tag: mmtk_jlsmall_typeof_tags = 15;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_int64_tag: mmtk_jlsmall_typeof_tags = 16;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_int8_tag: mmtk_jlsmall_typeof_tags = 17;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_uint16_tag: mmtk_jlsmall_typeof_tags = 18;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_uint32_tag: mmtk_jlsmall_typeof_tags = 19;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_uint64_tag: mmtk_jlsmall_typeof_tags = 20;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_uint8_tag: mmtk_jlsmall_typeof_tags = 21;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_tags_count: mmtk_jlsmall_typeof_tags = 22;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_bitstags_first: mmtk_jlsmall_typeof_tags = 13;
pub const mmtk_jlsmall_typeof_tags_mmtk_jl_max_tags: mmtk_jlsmall_typeof_tags = 64;
pub type mmtk_jlsmall_typeof_tags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_binding_t {
    pub _address: u8,
}
