/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _SETJMP_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_ISO: u32 = 4;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const __SC_THREAD_STACK_MIN_VALUE: u32 = 75;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PTHREAD_ATTR_NO_SIGMASK_NP: i32 = -1;
pub const MAX_BUMP_ALLOCATORS: u32 = 6;
pub const MAX_LARGE_OBJECT_ALLOCATORS: u32 = 2;
pub const MAX_MALLOC_ALLOCATORS: u32 = 1;
pub const MAX_IMMIX_ALLOCATORS: u32 = 1;
pub const MAX_FREE_LIST_ALLOCATORS: u32 = 2;
pub const MAX_MARK_COMPACT_ALLOCATORS: u32 = 1;
pub const __alignas_is_defined: u32 = 1;
pub const __alignof_is_defined: u32 = 1;
pub const HT_N_INLINE: u32 = 32;
pub const AL_N_INLINE: u32 = 29;
pub const SMALL_AL_N_INLINE: u32 = 6;
pub const JL_N_STACK_POOLS: u32 = 16;
pub const JL_GC_STATE_UNSAFE: u32 = 0;
pub const JL_GC_STATE_WAITING: u32 = 1;
pub const JL_GC_STATE_SAFE: u32 = 2;
pub const JL_GC_PARALLEL_COLLECTOR_THREAD: u32 = 3;
pub const JL_GC_CONCURRENT_COLLECTOR_THREAD: u32 = 4;
pub const JL_RNG_SIZE: u32 = 5;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int) -> !;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
extern "C" {
    pub fn clone(
        __fn: ::std::option::Option<
            unsafe extern "C" fn(__arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        __child_stack: *mut ::std::os::raw::c_void,
        __flags: ::std::os::raw::c_int,
        __arg: *mut ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unshare(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getcpu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcpu(
        arg1: *mut ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setns(
        __fd: ::std::os::raw::c_int,
        __nstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getaffinity(
        __pid: __pid_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timex"][::std::mem::size_of::<timex>() - 208usize];
    ["Alignment of timex"][::std::mem::align_of::<timex>() - 8usize];
    ["Offset of field: timex::modes"][::std::mem::offset_of!(timex, modes) - 0usize];
    ["Offset of field: timex::offset"][::std::mem::offset_of!(timex, offset) - 8usize];
    ["Offset of field: timex::freq"][::std::mem::offset_of!(timex, freq) - 16usize];
    ["Offset of field: timex::maxerror"][::std::mem::offset_of!(timex, maxerror) - 24usize];
    ["Offset of field: timex::esterror"][::std::mem::offset_of!(timex, esterror) - 32usize];
    ["Offset of field: timex::status"][::std::mem::offset_of!(timex, status) - 40usize];
    ["Offset of field: timex::constant"][::std::mem::offset_of!(timex, constant) - 48usize];
    ["Offset of field: timex::precision"][::std::mem::offset_of!(timex, precision) - 56usize];
    ["Offset of field: timex::tolerance"][::std::mem::offset_of!(timex, tolerance) - 64usize];
    ["Offset of field: timex::time"][::std::mem::offset_of!(timex, time) - 72usize];
    ["Offset of field: timex::tick"][::std::mem::offset_of!(timex, tick) - 88usize];
    ["Offset of field: timex::ppsfreq"][::std::mem::offset_of!(timex, ppsfreq) - 96usize];
    ["Offset of field: timex::jitter"][::std::mem::offset_of!(timex, jitter) - 104usize];
    ["Offset of field: timex::shift"][::std::mem::offset_of!(timex, shift) - 112usize];
    ["Offset of field: timex::stabil"][::std::mem::offset_of!(timex, stabil) - 120usize];
    ["Offset of field: timex::jitcnt"][::std::mem::offset_of!(timex, jitcnt) - 128usize];
    ["Offset of field: timex::calcnt"][::std::mem::offset_of!(timex, calcnt) - 136usize];
    ["Offset of field: timex::errcnt"][::std::mem::offset_of!(timex, errcnt) - 144usize];
    ["Offset of field: timex::stbcnt"][::std::mem::offset_of!(timex, stbcnt) - 152usize];
    ["Offset of field: timex::tai"][::std::mem::offset_of!(timex, tai) - 160usize];
};
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_getres(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
extern "C" {
    pub fn __sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_FAST_NP: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _pthread_cleanup_buffer"][::std::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
    ["Alignment of _pthread_cleanup_buffer"]
        [::std::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__routine"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
    ["Offset of field: _pthread_cleanup_buffer::__arg"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
    ["Offset of field: _pthread_cleanup_buffer::__prev"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
};
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_tryjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_timedjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_clockjoin_np(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setaffinity_np(
        __attr: *mut pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getaffinity_np(
        __attr: *const pthread_attr_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_default_np(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setsigmask_np(
        __attr: *mut pthread_attr_t,
        sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getsigmask_np(
        __attr: *const pthread_attr_t,
        sigmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setattr_default_np(__attr: *const pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(
        __th: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        __target_thread: pthread_t,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(
        __target_thread: pthread_t,
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(__level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *const cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getaffinity_np(
        __th: pthread_t,
        __cpusetsize: usize,
        __cpuset: *mut cpu_set_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cancel_jmp_buf_tag"][::std::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
    ["Alignment of __cancel_jmp_buf_tag"][::std::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
    ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_unwind_buf_t"][::std::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
    ["Alignment of __pthread_unwind_buf_t"]
        [::std::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
    ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __pthread_unwind_buf_t::__pad"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_frame"][::std::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
    ["Alignment of __pthread_cleanup_frame"]
        [::std::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct __pthread_cleanup_class {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_class"][::std::mem::size_of::<__pthread_cleanup_class>() - 24usize];
    ["Alignment of __pthread_cleanup_class"]
        [::std::mem::align_of::<__pthread_cleanup_class>() - 8usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_class::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_class::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_class, __cancel_type) - 20usize];
};
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_clocklock(
        __mutex: *mut pthread_mutex_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __clockid: clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_clockwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __clock_id: __clockid_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub const Allocator_AllocatorDefault: Allocator = 0;
pub const Allocator_AllocatorImmortal: Allocator = 1;
pub const Allocator_AllocatorLos: Allocator = 2;
pub const Allocator_AllocatorCode: Allocator = 3;
pub const Allocator_AllocatorReadOnly: Allocator = 4;
pub type Allocator = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RustDynPtr {
    pub data: *mut ::std::os::raw::c_void,
    pub vtable: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RustDynPtr"][::std::mem::size_of::<RustDynPtr>() - 16usize];
    ["Alignment of RustDynPtr"][::std::mem::align_of::<RustDynPtr>() - 8usize];
    ["Offset of field: RustDynPtr::data"][::std::mem::offset_of!(RustDynPtr, data) - 0usize];
    ["Offset of field: RustDynPtr::vtable"][::std::mem::offset_of!(RustDynPtr, vtable) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BumpAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub cursor: *mut ::std::os::raw::c_void,
    pub limit: *mut ::std::os::raw::c_void,
    pub space: RustDynPtr,
    pub context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BumpAllocator"][::std::mem::size_of::<BumpAllocator>() - 48usize];
    ["Alignment of BumpAllocator"][::std::mem::align_of::<BumpAllocator>() - 8usize];
    ["Offset of field: BumpAllocator::tls"][::std::mem::offset_of!(BumpAllocator, tls) - 0usize];
    ["Offset of field: BumpAllocator::cursor"]
        [::std::mem::offset_of!(BumpAllocator, cursor) - 8usize];
    ["Offset of field: BumpAllocator::limit"]
        [::std::mem::offset_of!(BumpAllocator, limit) - 16usize];
    ["Offset of field: BumpAllocator::space"]
        [::std::mem::offset_of!(BumpAllocator, space) - 24usize];
    ["Offset of field: BumpAllocator::context"]
        [::std::mem::offset_of!(BumpAllocator, context) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LargeObjectAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LargeObjectAllocator"][::std::mem::size_of::<LargeObjectAllocator>() - 24usize];
    ["Alignment of LargeObjectAllocator"][::std::mem::align_of::<LargeObjectAllocator>() - 8usize];
    ["Offset of field: LargeObjectAllocator::tls"]
        [::std::mem::offset_of!(LargeObjectAllocator, tls) - 0usize];
    ["Offset of field: LargeObjectAllocator::space"]
        [::std::mem::offset_of!(LargeObjectAllocator, space) - 8usize];
    ["Offset of field: LargeObjectAllocator::context"]
        [::std::mem::offset_of!(LargeObjectAllocator, context) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImmixAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub cursor: *mut ::std::os::raw::c_void,
    pub limit: *mut ::std::os::raw::c_void,
    pub immix_space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
    pub hot: u8,
    pub copy: u8,
    pub large_cursor: *mut ::std::os::raw::c_void,
    pub large_limit: *mut ::std::os::raw::c_void,
    pub request_for_large: u8,
    pub _align: [u8; 7usize],
    pub line_opt_tag: u8,
    pub line_opt: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImmixAllocator"][::std::mem::size_of::<ImmixAllocator>() - 88usize];
    ["Alignment of ImmixAllocator"][::std::mem::align_of::<ImmixAllocator>() - 8usize];
    ["Offset of field: ImmixAllocator::tls"][::std::mem::offset_of!(ImmixAllocator, tls) - 0usize];
    ["Offset of field: ImmixAllocator::cursor"]
        [::std::mem::offset_of!(ImmixAllocator, cursor) - 8usize];
    ["Offset of field: ImmixAllocator::limit"]
        [::std::mem::offset_of!(ImmixAllocator, limit) - 16usize];
    ["Offset of field: ImmixAllocator::immix_space"]
        [::std::mem::offset_of!(ImmixAllocator, immix_space) - 24usize];
    ["Offset of field: ImmixAllocator::context"]
        [::std::mem::offset_of!(ImmixAllocator, context) - 32usize];
    ["Offset of field: ImmixAllocator::hot"][::std::mem::offset_of!(ImmixAllocator, hot) - 40usize];
    ["Offset of field: ImmixAllocator::copy"]
        [::std::mem::offset_of!(ImmixAllocator, copy) - 41usize];
    ["Offset of field: ImmixAllocator::large_cursor"]
        [::std::mem::offset_of!(ImmixAllocator, large_cursor) - 48usize];
    ["Offset of field: ImmixAllocator::large_limit"]
        [::std::mem::offset_of!(ImmixAllocator, large_limit) - 56usize];
    ["Offset of field: ImmixAllocator::request_for_large"]
        [::std::mem::offset_of!(ImmixAllocator, request_for_large) - 64usize];
    ["Offset of field: ImmixAllocator::_align"]
        [::std::mem::offset_of!(ImmixAllocator, _align) - 65usize];
    ["Offset of field: ImmixAllocator::line_opt_tag"]
        [::std::mem::offset_of!(ImmixAllocator, line_opt_tag) - 72usize];
    ["Offset of field: ImmixAllocator::line_opt"]
        [::std::mem::offset_of!(ImmixAllocator, line_opt) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLBlock {
    pub Address: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FLBlock"][::std::mem::size_of::<FLBlock>() - 8usize];
    ["Alignment of FLBlock"][::std::mem::align_of::<FLBlock>() - 8usize];
    ["Offset of field: FLBlock::Address"][::std::mem::offset_of!(FLBlock, Address) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLBlockList {
    pub first: FLBlock,
    pub last: FLBlock,
    pub size: usize,
    pub lock: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FLBlockList"][::std::mem::size_of::<FLBlockList>() - 32usize];
    ["Alignment of FLBlockList"][::std::mem::align_of::<FLBlockList>() - 8usize];
    ["Offset of field: FLBlockList::first"][::std::mem::offset_of!(FLBlockList, first) - 0usize];
    ["Offset of field: FLBlockList::last"][::std::mem::offset_of!(FLBlockList, last) - 8usize];
    ["Offset of field: FLBlockList::size"][::std::mem::offset_of!(FLBlockList, size) - 16usize];
    ["Offset of field: FLBlockList::lock"][::std::mem::offset_of!(FLBlockList, lock) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FreeListAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
    pub available_blocks: *mut FLBlockList,
    pub available_blocks_stress: *mut FLBlockList,
    pub unswept_blocks: *mut FLBlockList,
    pub consumed_blocks: *mut FLBlockList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FreeListAllocator"][::std::mem::size_of::<FreeListAllocator>() - 56usize];
    ["Alignment of FreeListAllocator"][::std::mem::align_of::<FreeListAllocator>() - 8usize];
    ["Offset of field: FreeListAllocator::tls"]
        [::std::mem::offset_of!(FreeListAllocator, tls) - 0usize];
    ["Offset of field: FreeListAllocator::space"]
        [::std::mem::offset_of!(FreeListAllocator, space) - 8usize];
    ["Offset of field: FreeListAllocator::context"]
        [::std::mem::offset_of!(FreeListAllocator, context) - 16usize];
    ["Offset of field: FreeListAllocator::available_blocks"]
        [::std::mem::offset_of!(FreeListAllocator, available_blocks) - 24usize];
    ["Offset of field: FreeListAllocator::available_blocks_stress"]
        [::std::mem::offset_of!(FreeListAllocator, available_blocks_stress) - 32usize];
    ["Offset of field: FreeListAllocator::unswept_blocks"]
        [::std::mem::offset_of!(FreeListAllocator, unswept_blocks) - 40usize];
    ["Offset of field: FreeListAllocator::consumed_blocks"]
        [::std::mem::offset_of!(FreeListAllocator, consumed_blocks) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMTkMallocAllocator {
    pub tls: *mut ::std::os::raw::c_void,
    pub space: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMTkMallocAllocator"][::std::mem::size_of::<MMTkMallocAllocator>() - 24usize];
    ["Alignment of MMTkMallocAllocator"][::std::mem::align_of::<MMTkMallocAllocator>() - 8usize];
    ["Offset of field: MMTkMallocAllocator::tls"]
        [::std::mem::offset_of!(MMTkMallocAllocator, tls) - 0usize];
    ["Offset of field: MMTkMallocAllocator::space"]
        [::std::mem::offset_of!(MMTkMallocAllocator, space) - 8usize];
    ["Offset of field: MMTkMallocAllocator::context"]
        [::std::mem::offset_of!(MMTkMallocAllocator, context) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MarkCompactAllocator {
    pub bump_allocator: BumpAllocator,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MarkCompactAllocator"][::std::mem::size_of::<MarkCompactAllocator>() - 48usize];
    ["Alignment of MarkCompactAllocator"][::std::mem::align_of::<MarkCompactAllocator>() - 8usize];
    ["Offset of field: MarkCompactAllocator::bump_allocator"]
        [::std::mem::offset_of!(MarkCompactAllocator, bump_allocator) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Allocators {
    pub bump_pointer: [BumpAllocator; 6usize],
    pub large_object: [LargeObjectAllocator; 2usize],
    pub malloc: [MMTkMallocAllocator; 1usize],
    pub immix: [ImmixAllocator; 1usize],
    pub free_list: [FreeListAllocator; 2usize],
    pub markcompact: [MarkCompactAllocator; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Allocators"][::std::mem::size_of::<Allocators>() - 608usize];
    ["Alignment of Allocators"][::std::mem::align_of::<Allocators>() - 8usize];
    ["Offset of field: Allocators::bump_pointer"]
        [::std::mem::offset_of!(Allocators, bump_pointer) - 0usize];
    ["Offset of field: Allocators::large_object"]
        [::std::mem::offset_of!(Allocators, large_object) - 288usize];
    ["Offset of field: Allocators::malloc"][::std::mem::offset_of!(Allocators, malloc) - 336usize];
    ["Offset of field: Allocators::immix"][::std::mem::offset_of!(Allocators, immix) - 360usize];
    ["Offset of field: Allocators::free_list"]
        [::std::mem::offset_of!(Allocators, free_list) - 448usize];
    ["Offset of field: Allocators::markcompact"]
        [::std::mem::offset_of!(Allocators, markcompact) - 560usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MutatorConfig {
    pub allocator_mapping: *mut ::std::os::raw::c_void,
    pub space_mapping: *mut ::std::os::raw::c_void,
    pub prepare_func: RustDynPtr,
    pub release_func: RustDynPtr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MutatorConfig"][::std::mem::size_of::<MutatorConfig>() - 48usize];
    ["Alignment of MutatorConfig"][::std::mem::align_of::<MutatorConfig>() - 8usize];
    ["Offset of field: MutatorConfig::allocator_mapping"]
        [::std::mem::offset_of!(MutatorConfig, allocator_mapping) - 0usize];
    ["Offset of field: MutatorConfig::space_mapping"]
        [::std::mem::offset_of!(MutatorConfig, space_mapping) - 8usize];
    ["Offset of field: MutatorConfig::prepare_func"]
        [::std::mem::offset_of!(MutatorConfig, prepare_func) - 16usize];
    ["Offset of field: MutatorConfig::release_func"]
        [::std::mem::offset_of!(MutatorConfig, release_func) - 32usize];
};
#[repr(C)]
#[repr(align(8))]
pub struct MMTkMutatorContext {
    pub _bindgen_opaque_blob: [u64; 87usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMTkMutatorContext"][::std::mem::size_of::<MMTkMutatorContext>() - 696usize];
    ["Alignment of MMTkMutatorContext"][::std::mem::align_of::<MMTkMutatorContext>() - 8usize];
};
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_taggedvalue_bits {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_taggedvalue_bits"]
        [::std::mem::size_of::<mmtk__jl_taggedvalue_bits>() - 8usize];
    ["Alignment of mmtk__jl_taggedvalue_bits"]
        [::std::mem::align_of::<mmtk__jl_taggedvalue_bits>() - 8usize];
};
impl mmtk__jl_taggedvalue_bits {
    #[inline]
    pub fn gc(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_gc(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn in_image(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_in_image(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tag(&self) -> usize {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 60u8) as u64) }
    }
    #[inline]
    pub fn set_tag(&mut self, val: usize) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 60u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        gc: usize,
        in_image: usize,
        unused: usize,
        tag: usize,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let gc: u64 = unsafe { ::std::mem::transmute(gc) };
            gc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let in_image: u64 = unsafe { ::std::mem::transmute(in_image) };
            in_image as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let unused: u64 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit.set(4usize, 60u8, {
            let tag: u64 = unsafe { ::std::mem::transmute(tag) };
            tag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_value_t {
    _unused: [u8; 0],
}
pub type mmtk_jl_value_t = mmtk__jl_value_t;
pub type mmtk_jl_taggedvalue_t = mmtk__jl_taggedvalue_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_taggedvalue_t {
    pub __bindgen_anon_1: mmtk__jl_taggedvalue_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk__jl_taggedvalue_t__bindgen_ty_1 {
    pub header: usize,
    pub next: *mut mmtk_jl_taggedvalue_t,
    pub type_: *mut mmtk_jl_value_t,
    pub bits: mmtk__jl_taggedvalue_bits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_taggedvalue_t__bindgen_ty_1"]
        [::std::mem::size_of::<mmtk__jl_taggedvalue_t__bindgen_ty_1>() - 8usize];
    ["Alignment of mmtk__jl_taggedvalue_t__bindgen_ty_1"]
        [::std::mem::align_of::<mmtk__jl_taggedvalue_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: mmtk__jl_taggedvalue_t__bindgen_ty_1::header"]
        [::std::mem::offset_of!(mmtk__jl_taggedvalue_t__bindgen_ty_1, header) - 0usize];
    ["Offset of field: mmtk__jl_taggedvalue_t__bindgen_ty_1::next"]
        [::std::mem::offset_of!(mmtk__jl_taggedvalue_t__bindgen_ty_1, next) - 0usize];
    ["Offset of field: mmtk__jl_taggedvalue_t__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(mmtk__jl_taggedvalue_t__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: mmtk__jl_taggedvalue_t__bindgen_ty_1::bits"]
        [::std::mem::offset_of!(mmtk__jl_taggedvalue_t__bindgen_ty_1, bits) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_taggedvalue_t"][::std::mem::size_of::<mmtk__jl_taggedvalue_t>() - 8usize];
    ["Alignment of mmtk__jl_taggedvalue_t"]
        [::std::mem::align_of::<mmtk__jl_taggedvalue_t>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_datatype_layout_t {
    pub size: u32,
    pub nfields: u32,
    pub npointers: u32,
    pub first_ptr: i32,
    pub alignment: u16,
    pub flags: mmtk_jl_datatype_layout_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_datatype_layout_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_datatype_layout_t__bindgen_ty_1"]
        [::std::mem::size_of::<mmtk_jl_datatype_layout_t__bindgen_ty_1>() - 2usize];
    ["Alignment of mmtk_jl_datatype_layout_t__bindgen_ty_1"]
        [::std::mem::align_of::<mmtk_jl_datatype_layout_t__bindgen_ty_1>() - 2usize];
};
impl mmtk_jl_datatype_layout_t__bindgen_ty_1 {
    #[inline]
    pub fn haspadding(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_haspadding(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fielddesc_type(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_fielddesc_type(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn arrayelem_isboxed(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_arrayelem_isboxed(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn arrayelem_isunion(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_arrayelem_isunion(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isbitsegal(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isbitsegal(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        haspadding: u16,
        fielddesc_type: u16,
        arrayelem_isboxed: u16,
        arrayelem_isunion: u16,
        isbitsegal: u16,
        padding: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let haspadding: u16 = unsafe { ::std::mem::transmute(haspadding) };
            haspadding as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let fielddesc_type: u16 = unsafe { ::std::mem::transmute(fielddesc_type) };
            fielddesc_type as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let arrayelem_isboxed: u16 = unsafe { ::std::mem::transmute(arrayelem_isboxed) };
            arrayelem_isboxed as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let arrayelem_isunion: u16 = unsafe { ::std::mem::transmute(arrayelem_isunion) };
            arrayelem_isunion as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let isbitsegal: u16 = unsafe { ::std::mem::transmute(isbitsegal) };
            isbitsegal as u64
        });
        __bindgen_bitfield_unit.set(6usize, 10u8, {
            let padding: u16 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_datatype_layout_t"]
        [::std::mem::size_of::<mmtk_jl_datatype_layout_t>() - 20usize];
    ["Alignment of mmtk_jl_datatype_layout_t"]
        [::std::mem::align_of::<mmtk_jl_datatype_layout_t>() - 4usize];
    ["Offset of field: mmtk_jl_datatype_layout_t::size"]
        [::std::mem::offset_of!(mmtk_jl_datatype_layout_t, size) - 0usize];
    ["Offset of field: mmtk_jl_datatype_layout_t::nfields"]
        [::std::mem::offset_of!(mmtk_jl_datatype_layout_t, nfields) - 4usize];
    ["Offset of field: mmtk_jl_datatype_layout_t::npointers"]
        [::std::mem::offset_of!(mmtk_jl_datatype_layout_t, npointers) - 8usize];
    ["Offset of field: mmtk_jl_datatype_layout_t::first_ptr"]
        [::std::mem::offset_of!(mmtk_jl_datatype_layout_t, first_ptr) - 12usize];
    ["Offset of field: mmtk_jl_datatype_layout_t::alignment"]
        [::std::mem::offset_of!(mmtk_jl_datatype_layout_t, alignment) - 16usize];
    ["Offset of field: mmtk_jl_datatype_layout_t::flags"]
        [::std::mem::offset_of!(mmtk_jl_datatype_layout_t, flags) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_typename_t {
    pub name: *mut ::std::os::raw::c_void,
    pub module: *mut mmtk__jl_module_t,
    pub names: *mut ::std::os::raw::c_void,
    pub atomicfields: *const u32,
    pub constfields: *const u32,
    pub wrapper: *mut ::std::os::raw::c_void,
    pub Typeofwrapper: *mut ::std::os::raw::c_void,
    pub cache: *mut ::std::os::raw::c_void,
    pub linearcache: *mut ::std::os::raw::c_void,
    pub mt: *mut ::std::os::raw::c_void,
    pub partial: *mut ::std::os::raw::c_void,
    pub hash: isize,
    pub n_uninitialized: i32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub max_methods: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_typename_t"][::std::mem::size_of::<mmtk_jl_typename_t>() - 104usize];
    ["Alignment of mmtk_jl_typename_t"][::std::mem::align_of::<mmtk_jl_typename_t>() - 8usize];
    ["Offset of field: mmtk_jl_typename_t::name"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, name) - 0usize];
    ["Offset of field: mmtk_jl_typename_t::module"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, module) - 8usize];
    ["Offset of field: mmtk_jl_typename_t::names"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, names) - 16usize];
    ["Offset of field: mmtk_jl_typename_t::atomicfields"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, atomicfields) - 24usize];
    ["Offset of field: mmtk_jl_typename_t::constfields"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, constfields) - 32usize];
    ["Offset of field: mmtk_jl_typename_t::wrapper"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, wrapper) - 40usize];
    ["Offset of field: mmtk_jl_typename_t::Typeofwrapper"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, Typeofwrapper) - 48usize];
    ["Offset of field: mmtk_jl_typename_t::cache"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, cache) - 56usize];
    ["Offset of field: mmtk_jl_typename_t::linearcache"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, linearcache) - 64usize];
    ["Offset of field: mmtk_jl_typename_t::mt"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, mt) - 72usize];
    ["Offset of field: mmtk_jl_typename_t::partial"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, partial) - 80usize];
    ["Offset of field: mmtk_jl_typename_t::hash"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, hash) - 88usize];
    ["Offset of field: mmtk_jl_typename_t::n_uninitialized"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, n_uninitialized) - 96usize];
    ["Offset of field: mmtk_jl_typename_t::max_methods"]
        [::std::mem::offset_of!(mmtk_jl_typename_t, max_methods) - 101usize];
};
impl mmtk_jl_typename_t {
    #[inline]
    pub fn abstract_(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_abstract(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mutabl(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mutabl(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mayinlinealloc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mayinlinealloc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set__reserved(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        abstract_: u8,
        mutabl: u8,
        mayinlinealloc: u8,
        _reserved: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let abstract_: u8 = unsafe { ::std::mem::transmute(abstract_) };
            abstract_ as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mutabl: u8 = unsafe { ::std::mem::transmute(mutabl) };
            mutabl as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let mayinlinealloc: u8 = unsafe { ::std::mem::transmute(mayinlinealloc) };
            mayinlinealloc as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let _reserved: u8 = unsafe { ::std::mem::transmute(_reserved) };
            _reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_svec_t {
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_svec_t"][::std::mem::size_of::<mmtk_jl_svec_t>() - 8usize];
    ["Alignment of mmtk_jl_svec_t"][::std::mem::align_of::<mmtk_jl_svec_t>() - 8usize];
    ["Offset of field: mmtk_jl_svec_t::length"]
        [::std::mem::offset_of!(mmtk_jl_svec_t, length) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_datatype_t {
    pub name: *mut mmtk_jl_typename_t,
    pub super_: *mut mmtk__jl_datatype_t,
    pub parameters: *mut mmtk_jl_svec_t,
    pub types: *mut mmtk_jl_svec_t,
    pub instance: *mut mmtk_jl_value_t,
    pub layout: *const mmtk_jl_datatype_layout_t,
    pub hash: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_datatype_t"][::std::mem::size_of::<mmtk__jl_datatype_t>() - 56usize];
    ["Alignment of mmtk__jl_datatype_t"][::std::mem::align_of::<mmtk__jl_datatype_t>() - 8usize];
    ["Offset of field: mmtk__jl_datatype_t::name"]
        [::std::mem::offset_of!(mmtk__jl_datatype_t, name) - 0usize];
    ["Offset of field: mmtk__jl_datatype_t::super_"]
        [::std::mem::offset_of!(mmtk__jl_datatype_t, super_) - 8usize];
    ["Offset of field: mmtk__jl_datatype_t::parameters"]
        [::std::mem::offset_of!(mmtk__jl_datatype_t, parameters) - 16usize];
    ["Offset of field: mmtk__jl_datatype_t::types"]
        [::std::mem::offset_of!(mmtk__jl_datatype_t, types) - 24usize];
    ["Offset of field: mmtk__jl_datatype_t::instance"]
        [::std::mem::offset_of!(mmtk__jl_datatype_t, instance) - 32usize];
    ["Offset of field: mmtk__jl_datatype_t::layout"]
        [::std::mem::offset_of!(mmtk__jl_datatype_t, layout) - 40usize];
    ["Offset of field: mmtk__jl_datatype_t::hash"]
        [::std::mem::offset_of!(mmtk__jl_datatype_t, hash) - 48usize];
};
impl mmtk__jl_datatype_t {
    #[inline]
    pub fn hasfreetypevars(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_hasfreetypevars(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isconcretetype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isconcretetype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isdispatchtuple(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isdispatchtuple(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isbitstype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isbitstype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn zeroinit(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_zeroinit(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_concrete_subtype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_has_concrete_subtype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn maybe_subtype_of_cache(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_maybe_subtype_of_cache(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isprimitivetype(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isprimitivetype(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ismutationfree(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ismutationfree(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isidentityfree(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_isidentityfree(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn smalltag(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_smalltag(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hasfreetypevars: u16,
        isconcretetype: u16,
        isdispatchtuple: u16,
        isbitstype: u16,
        zeroinit: u16,
        has_concrete_subtype: u16,
        maybe_subtype_of_cache: u16,
        isprimitivetype: u16,
        ismutationfree: u16,
        isidentityfree: u16,
        smalltag: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let hasfreetypevars: u16 = unsafe { ::std::mem::transmute(hasfreetypevars) };
            hasfreetypevars as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let isconcretetype: u16 = unsafe { ::std::mem::transmute(isconcretetype) };
            isconcretetype as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let isdispatchtuple: u16 = unsafe { ::std::mem::transmute(isdispatchtuple) };
            isdispatchtuple as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let isbitstype: u16 = unsafe { ::std::mem::transmute(isbitstype) };
            isbitstype as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let zeroinit: u16 = unsafe { ::std::mem::transmute(zeroinit) };
            zeroinit as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_concrete_subtype: u16 = unsafe { ::std::mem::transmute(has_concrete_subtype) };
            has_concrete_subtype as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let maybe_subtype_of_cache: u16 =
                unsafe { ::std::mem::transmute(maybe_subtype_of_cache) };
            maybe_subtype_of_cache as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let isprimitivetype: u16 = unsafe { ::std::mem::transmute(isprimitivetype) };
            isprimitivetype as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ismutationfree: u16 = unsafe { ::std::mem::transmute(ismutationfree) };
            ismutationfree as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let isidentityfree: u16 = unsafe { ::std::mem::transmute(isidentityfree) };
            isidentityfree as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let smalltag: u16 = unsafe { ::std::mem::transmute(smalltag) };
            smalltag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mmtk_jl_datatype_t = mmtk__jl_datatype_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_genericmemory_t {
    pub length: usize,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_genericmemory_t"][::std::mem::size_of::<mmtk_jl_genericmemory_t>() - 16usize];
    ["Alignment of mmtk_jl_genericmemory_t"]
        [::std::mem::align_of::<mmtk_jl_genericmemory_t>() - 8usize];
    ["Offset of field: mmtk_jl_genericmemory_t::length"]
        [::std::mem::offset_of!(mmtk_jl_genericmemory_t, length) - 0usize];
    ["Offset of field: mmtk_jl_genericmemory_t::ptr"]
        [::std::mem::offset_of!(mmtk_jl_genericmemory_t, ptr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_genericmemoryref_t {
    pub ptr_or_offset: *mut ::std::os::raw::c_void,
    pub mem: *mut mmtk_jl_genericmemory_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_genericmemoryref_t"]
        [::std::mem::size_of::<mmtk_jl_genericmemoryref_t>() - 16usize];
    ["Alignment of mmtk_jl_genericmemoryref_t"]
        [::std::mem::align_of::<mmtk_jl_genericmemoryref_t>() - 8usize];
    ["Offset of field: mmtk_jl_genericmemoryref_t::ptr_or_offset"]
        [::std::mem::offset_of!(mmtk_jl_genericmemoryref_t, ptr_or_offset) - 0usize];
    ["Offset of field: mmtk_jl_genericmemoryref_t::mem"]
        [::std::mem::offset_of!(mmtk_jl_genericmemoryref_t, mem) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct mmtk_jl_array_t {
    pub ref_: mmtk_jl_genericmemoryref_t,
    pub dimsize: __IncompleteArrayField<usize>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_array_t"][::std::mem::size_of::<mmtk_jl_array_t>() - 16usize];
    ["Alignment of mmtk_jl_array_t"][::std::mem::align_of::<mmtk_jl_array_t>() - 8usize];
    ["Offset of field: mmtk_jl_array_t::ref_"]
        [::std::mem::offset_of!(mmtk_jl_array_t, ref_) - 0usize];
    ["Offset of field: mmtk_jl_array_t::dimsize"]
        [::std::mem::offset_of!(mmtk_jl_array_t, dimsize) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_sym_t {
    pub left: u64,
    pub right: u64,
    pub hash: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_sym_t"][::std::mem::size_of::<mmtk__jl_sym_t>() - 24usize];
    ["Alignment of mmtk__jl_sym_t"][::std::mem::align_of::<mmtk__jl_sym_t>() - 8usize];
    ["Offset of field: mmtk__jl_sym_t::left"]
        [::std::mem::offset_of!(mmtk__jl_sym_t, left) - 0usize];
    ["Offset of field: mmtk__jl_sym_t::right"]
        [::std::mem::offset_of!(mmtk__jl_sym_t, right) - 8usize];
    ["Offset of field: mmtk__jl_sym_t::hash"]
        [::std::mem::offset_of!(mmtk__jl_sym_t, hash) - 16usize];
};
pub type mmtk_jl_sym_t = mmtk__jl_sym_t;
pub type mmtk_jl_ptr_kind_union_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_binding_partition_t {
    pub restriction: u64,
    pub min_world: usize,
    pub max_world: u64,
    pub next: u64,
    pub reserved: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_binding_partition_t"]
        [::std::mem::size_of::<mmtk__jl_binding_partition_t>() - 40usize];
    ["Alignment of mmtk__jl_binding_partition_t"]
        [::std::mem::align_of::<mmtk__jl_binding_partition_t>() - 8usize];
    ["Offset of field: mmtk__jl_binding_partition_t::restriction"]
        [::std::mem::offset_of!(mmtk__jl_binding_partition_t, restriction) - 0usize];
    ["Offset of field: mmtk__jl_binding_partition_t::min_world"]
        [::std::mem::offset_of!(mmtk__jl_binding_partition_t, min_world) - 8usize];
    ["Offset of field: mmtk__jl_binding_partition_t::max_world"]
        [::std::mem::offset_of!(mmtk__jl_binding_partition_t, max_world) - 16usize];
    ["Offset of field: mmtk__jl_binding_partition_t::next"]
        [::std::mem::offset_of!(mmtk__jl_binding_partition_t, next) - 24usize];
    ["Offset of field: mmtk__jl_binding_partition_t::reserved"]
        [::std::mem::offset_of!(mmtk__jl_binding_partition_t, reserved) - 32usize];
};
pub type mmtk_jl_binding_partition_t = mmtk__jl_binding_partition_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_binding_t {
    pub globalref: *mut ::std::os::raw::c_void,
    pub value: u64,
    pub partitions: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_binding_t"][::std::mem::size_of::<mmtk_jl_binding_t>() - 32usize];
    ["Alignment of mmtk_jl_binding_t"][::std::mem::align_of::<mmtk_jl_binding_t>() - 8usize];
    ["Offset of field: mmtk_jl_binding_t::globalref"]
        [::std::mem::offset_of!(mmtk_jl_binding_t, globalref) - 0usize];
    ["Offset of field: mmtk_jl_binding_t::value"]
        [::std::mem::offset_of!(mmtk_jl_binding_t, value) - 8usize];
    ["Offset of field: mmtk_jl_binding_t::partitions"]
        [::std::mem::offset_of!(mmtk_jl_binding_t, partitions) - 16usize];
};
impl mmtk_jl_binding_t {
    #[inline]
    pub fn declared(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_declared(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn exportp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_exportp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn publicp(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_publicp(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deprecated(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_deprecated(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn padding(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_padding(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        declared: u8,
        exportp: u8,
        publicp: u8,
        deprecated: u8,
        padding: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let declared: u8 = unsafe { ::std::mem::transmute(declared) };
            declared as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let exportp: u8 = unsafe { ::std::mem::transmute(exportp) };
            exportp as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let publicp: u8 = unsafe { ::std::mem::transmute(publicp) };
            publicp as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let deprecated: u8 = unsafe { ::std::mem::transmute(deprecated) };
            deprecated as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let padding: u8 = unsafe { ::std::mem::transmute(padding) };
            padding as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_htable_t {
    pub size: usize,
    pub table: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_htable_t"][::std::mem::size_of::<mmtk_htable_t>() - 272usize];
    ["Alignment of mmtk_htable_t"][::std::mem::align_of::<mmtk_htable_t>() - 8usize];
    ["Offset of field: mmtk_htable_t::size"][::std::mem::offset_of!(mmtk_htable_t, size) - 0usize];
    ["Offset of field: mmtk_htable_t::table"]
        [::std::mem::offset_of!(mmtk_htable_t, table) - 8usize];
    ["Offset of field: mmtk_htable_t::_space"]
        [::std::mem::offset_of!(mmtk_htable_t, _space) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_arraylist_t {
    pub len: usize,
    pub max: usize,
    pub items: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 29usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_arraylist_t"][::std::mem::size_of::<mmtk_arraylist_t>() - 256usize];
    ["Alignment of mmtk_arraylist_t"][::std::mem::align_of::<mmtk_arraylist_t>() - 8usize];
    ["Offset of field: mmtk_arraylist_t::len"]
        [::std::mem::offset_of!(mmtk_arraylist_t, len) - 0usize];
    ["Offset of field: mmtk_arraylist_t::max"]
        [::std::mem::offset_of!(mmtk_arraylist_t, max) - 8usize];
    ["Offset of field: mmtk_arraylist_t::items"]
        [::std::mem::offset_of!(mmtk_arraylist_t, items) - 16usize];
    ["Offset of field: mmtk_arraylist_t::_space"]
        [::std::mem::offset_of!(mmtk_arraylist_t, _space) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_small_arraylist_t {
    pub len: u32,
    pub max: u32,
    pub items: *mut *mut ::std::os::raw::c_void,
    pub _space: [*mut ::std::os::raw::c_void; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_small_arraylist_t"][::std::mem::size_of::<mmtk_small_arraylist_t>() - 64usize];
    ["Alignment of mmtk_small_arraylist_t"]
        [::std::mem::align_of::<mmtk_small_arraylist_t>() - 8usize];
    ["Offset of field: mmtk_small_arraylist_t::len"]
        [::std::mem::offset_of!(mmtk_small_arraylist_t, len) - 0usize];
    ["Offset of field: mmtk_small_arraylist_t::max"]
        [::std::mem::offset_of!(mmtk_small_arraylist_t, max) - 4usize];
    ["Offset of field: mmtk_small_arraylist_t::items"]
        [::std::mem::offset_of!(mmtk_small_arraylist_t, items) - 8usize];
    ["Offset of field: mmtk_small_arraylist_t::_space"]
        [::std::mem::offset_of!(mmtk_small_arraylist_t, _space) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_uuid_t {
    pub hi: u64,
    pub lo: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_uuid_t"][::std::mem::size_of::<mmtk_jl_uuid_t>() - 16usize];
    ["Alignment of mmtk_jl_uuid_t"][::std::mem::align_of::<mmtk_jl_uuid_t>() - 8usize];
    ["Offset of field: mmtk_jl_uuid_t::hi"][::std::mem::offset_of!(mmtk_jl_uuid_t, hi) - 0usize];
    ["Offset of field: mmtk_jl_uuid_t::lo"][::std::mem::offset_of!(mmtk_jl_uuid_t, lo) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_mutex_t {
    pub owner: u64,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_mutex_t"][::std::mem::size_of::<mmtk_jl_mutex_t>() - 16usize];
    ["Alignment of mmtk_jl_mutex_t"][::std::mem::align_of::<mmtk_jl_mutex_t>() - 8usize];
    ["Offset of field: mmtk_jl_mutex_t::owner"]
        [::std::mem::offset_of!(mmtk_jl_mutex_t, owner) - 0usize];
    ["Offset of field: mmtk_jl_mutex_t::count"]
        [::std::mem::offset_of!(mmtk_jl_mutex_t, count) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_module_t {
    pub name: *mut ::std::os::raw::c_void,
    pub parent: *mut mmtk__jl_module_t,
    pub bindings: *mut u64,
    pub bindingkeyset: *mut u128,
    pub file: *mut ::std::os::raw::c_void,
    pub line: i32,
    pub usings: mmtk_arraylist_t,
    pub build_id: mmtk_jl_uuid_t,
    pub uuid: mmtk_jl_uuid_t,
    pub counter: u32,
    pub nospecialize: i32,
    pub optlevel: i8,
    pub compile: i8,
    pub infer: i8,
    pub istopmod: u8,
    pub max_methods: i8,
    pub lock: mmtk_jl_mutex_t,
    pub hash: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_module_t"][::std::mem::size_of::<mmtk__jl_module_t>() - 376usize];
    ["Alignment of mmtk__jl_module_t"][::std::mem::align_of::<mmtk__jl_module_t>() - 8usize];
    ["Offset of field: mmtk__jl_module_t::name"]
        [::std::mem::offset_of!(mmtk__jl_module_t, name) - 0usize];
    ["Offset of field: mmtk__jl_module_t::parent"]
        [::std::mem::offset_of!(mmtk__jl_module_t, parent) - 8usize];
    ["Offset of field: mmtk__jl_module_t::bindings"]
        [::std::mem::offset_of!(mmtk__jl_module_t, bindings) - 16usize];
    ["Offset of field: mmtk__jl_module_t::bindingkeyset"]
        [::std::mem::offset_of!(mmtk__jl_module_t, bindingkeyset) - 24usize];
    ["Offset of field: mmtk__jl_module_t::file"]
        [::std::mem::offset_of!(mmtk__jl_module_t, file) - 32usize];
    ["Offset of field: mmtk__jl_module_t::line"]
        [::std::mem::offset_of!(mmtk__jl_module_t, line) - 40usize];
    ["Offset of field: mmtk__jl_module_t::usings"]
        [::std::mem::offset_of!(mmtk__jl_module_t, usings) - 48usize];
    ["Offset of field: mmtk__jl_module_t::build_id"]
        [::std::mem::offset_of!(mmtk__jl_module_t, build_id) - 304usize];
    ["Offset of field: mmtk__jl_module_t::uuid"]
        [::std::mem::offset_of!(mmtk__jl_module_t, uuid) - 320usize];
    ["Offset of field: mmtk__jl_module_t::counter"]
        [::std::mem::offset_of!(mmtk__jl_module_t, counter) - 336usize];
    ["Offset of field: mmtk__jl_module_t::nospecialize"]
        [::std::mem::offset_of!(mmtk__jl_module_t, nospecialize) - 340usize];
    ["Offset of field: mmtk__jl_module_t::optlevel"]
        [::std::mem::offset_of!(mmtk__jl_module_t, optlevel) - 344usize];
    ["Offset of field: mmtk__jl_module_t::compile"]
        [::std::mem::offset_of!(mmtk__jl_module_t, compile) - 345usize];
    ["Offset of field: mmtk__jl_module_t::infer"]
        [::std::mem::offset_of!(mmtk__jl_module_t, infer) - 346usize];
    ["Offset of field: mmtk__jl_module_t::istopmod"]
        [::std::mem::offset_of!(mmtk__jl_module_t, istopmod) - 347usize];
    ["Offset of field: mmtk__jl_module_t::max_methods"]
        [::std::mem::offset_of!(mmtk__jl_module_t, max_methods) - 348usize];
    ["Offset of field: mmtk__jl_module_t::lock"]
        [::std::mem::offset_of!(mmtk__jl_module_t, lock) - 352usize];
    ["Offset of field: mmtk__jl_module_t::hash"]
        [::std::mem::offset_of!(mmtk__jl_module_t, hash) - 368usize];
};
pub type mmtk_jl_module_t = mmtk__jl_module_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_excstack_t {
    pub top: usize,
    pub reserved_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_excstack_t"][::std::mem::size_of::<mmtk__jl_excstack_t>() - 16usize];
    ["Alignment of mmtk__jl_excstack_t"][::std::mem::align_of::<mmtk__jl_excstack_t>() - 8usize];
    ["Offset of field: mmtk__jl_excstack_t::top"]
        [::std::mem::offset_of!(mmtk__jl_excstack_t, top) - 0usize];
    ["Offset of field: mmtk__jl_excstack_t::reserved_size"]
        [::std::mem::offset_of!(mmtk__jl_excstack_t, reserved_size) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_bt_element_t {
    pub __bindgen_anon_1: mmtk__jl_bt_element_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk__jl_bt_element_t__bindgen_ty_1 {
    pub uintptr: usize,
    pub jlvalue: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_bt_element_t__bindgen_ty_1"]
        [::std::mem::size_of::<mmtk__jl_bt_element_t__bindgen_ty_1>() - 8usize];
    ["Alignment of mmtk__jl_bt_element_t__bindgen_ty_1"]
        [::std::mem::align_of::<mmtk__jl_bt_element_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: mmtk__jl_bt_element_t__bindgen_ty_1::uintptr"]
        [::std::mem::offset_of!(mmtk__jl_bt_element_t__bindgen_ty_1, uintptr) - 0usize];
    ["Offset of field: mmtk__jl_bt_element_t__bindgen_ty_1::jlvalue"]
        [::std::mem::offset_of!(mmtk__jl_bt_element_t__bindgen_ty_1, jlvalue) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_bt_element_t"][::std::mem::size_of::<mmtk__jl_bt_element_t>() - 8usize];
    ["Alignment of mmtk__jl_bt_element_t"]
        [::std::mem::align_of::<mmtk__jl_bt_element_t>() - 8usize];
};
pub type mmtk_jl_bt_element_t = mmtk__jl_bt_element_t;
pub type mmtk_jl_excstack_t = mmtk__jl_excstack_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_stack_context_t {
    pub uc_mcontext: sigjmp_buf,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_stack_context_t"]
        [::std::mem::size_of::<mmtk_jl_stack_context_t>() - 200usize];
    ["Alignment of mmtk_jl_stack_context_t"]
        [::std::mem::align_of::<mmtk_jl_stack_context_t>() - 8usize];
    ["Offset of field: mmtk_jl_stack_context_t::uc_mcontext"]
        [::std::mem::offset_of!(mmtk_jl_stack_context_t, uc_mcontext) - 0usize];
};
pub type mmtk__jl_ucontext_t = mmtk_jl_stack_context_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk_jl_ucontext_t {
    pub __bindgen_anon_1: mmtk_jl_ucontext_t__bindgen_ty_1,
    pub stkbuf: *mut ::std::os::raw::c_void,
    pub bufsz: usize,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk_jl_ucontext_t__bindgen_ty_1 {
    pub ctx: *mut mmtk__jl_ucontext_t,
    pub copy_ctx: *mut mmtk_jl_stack_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_ucontext_t__bindgen_ty_1"]
        [::std::mem::size_of::<mmtk_jl_ucontext_t__bindgen_ty_1>() - 8usize];
    ["Alignment of mmtk_jl_ucontext_t__bindgen_ty_1"]
        [::std::mem::align_of::<mmtk_jl_ucontext_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: mmtk_jl_ucontext_t__bindgen_ty_1::ctx"]
        [::std::mem::offset_of!(mmtk_jl_ucontext_t__bindgen_ty_1, ctx) - 0usize];
    ["Offset of field: mmtk_jl_ucontext_t__bindgen_ty_1::copy_ctx"]
        [::std::mem::offset_of!(mmtk_jl_ucontext_t__bindgen_ty_1, copy_ctx) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_ucontext_t"][::std::mem::size_of::<mmtk_jl_ucontext_t>() - 32usize];
    ["Alignment of mmtk_jl_ucontext_t"][::std::mem::align_of::<mmtk_jl_ucontext_t>() - 8usize];
    ["Offset of field: mmtk_jl_ucontext_t::stkbuf"]
        [::std::mem::offset_of!(mmtk_jl_ucontext_t, stkbuf) - 8usize];
    ["Offset of field: mmtk_jl_ucontext_t::bufsz"]
        [::std::mem::offset_of!(mmtk_jl_ucontext_t, bufsz) - 16usize];
};
impl mmtk_jl_ucontext_t {
    #[inline]
    pub fn copy_stack(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_copy_stack(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn started(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_started(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        copy_stack: ::std::os::raw::c_uint,
        started: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let copy_stack: u32 = unsafe { ::std::mem::transmute(copy_stack) };
            copy_stack as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let started: u32 = unsafe { ::std::mem::transmute(started) };
            started as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mmtk_jl_gcframe_t = mmtk__jl_gcframe_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk__jl_gcframe_t {
    pub nroots: usize,
    pub prev: *mut mmtk__jl_gcframe_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_gcframe_t"][::std::mem::size_of::<mmtk__jl_gcframe_t>() - 16usize];
    ["Alignment of mmtk__jl_gcframe_t"][::std::mem::align_of::<mmtk__jl_gcframe_t>() - 8usize];
    ["Offset of field: mmtk__jl_gcframe_t::nroots"]
        [::std::mem::offset_of!(mmtk__jl_gcframe_t, nroots) - 0usize];
    ["Offset of field: mmtk__jl_gcframe_t::prev"]
        [::std::mem::offset_of!(mmtk__jl_gcframe_t, prev) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_pool_t {
    pub freelist: *mut mmtk_jl_taggedvalue_t,
    pub newpages: *mut mmtk_jl_taggedvalue_t,
    pub osize: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_gc_pool_t"][::std::mem::size_of::<mmtk_jl_gc_pool_t>() - 24usize];
    ["Alignment of mmtk_jl_gc_pool_t"][::std::mem::align_of::<mmtk_jl_gc_pool_t>() - 8usize];
    ["Offset of field: mmtk_jl_gc_pool_t::freelist"]
        [::std::mem::offset_of!(mmtk_jl_gc_pool_t, freelist) - 0usize];
    ["Offset of field: mmtk_jl_gc_pool_t::newpages"]
        [::std::mem::offset_of!(mmtk_jl_gc_pool_t, newpages) - 8usize];
    ["Offset of field: mmtk_jl_gc_pool_t::osize"]
        [::std::mem::offset_of!(mmtk_jl_gc_pool_t, osize) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_thread_gc_num_common_t {
    pub allocd: u64,
    pub pool_live_bytes: u64,
    pub malloc: u64,
    pub realloc: u64,
    pub poolalloc: u64,
    pub bigalloc: u64,
    pub free_acc: u64,
    pub alloc_acc: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_thread_gc_num_common_t"]
        [::std::mem::size_of::<mmtk_jl_thread_gc_num_common_t>() - 64usize];
    ["Alignment of mmtk_jl_thread_gc_num_common_t"]
        [::std::mem::align_of::<mmtk_jl_thread_gc_num_common_t>() - 8usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::allocd"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, allocd) - 0usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::pool_live_bytes"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, pool_live_bytes) - 8usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::malloc"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, malloc) - 16usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::realloc"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, realloc) - 24usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::poolalloc"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, poolalloc) - 32usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::bigalloc"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, bigalloc) - 40usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::free_acc"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, free_acc) - 48usize];
    ["Offset of field: mmtk_jl_thread_gc_num_common_t::alloc_acc"]
        [::std::mem::offset_of!(mmtk_jl_thread_gc_num_common_t, alloc_acc) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_thread_heap_common_t {
    pub weak_refs: mmtk_small_arraylist_t,
    pub live_tasks: mmtk_small_arraylist_t,
    pub mallocarrays: *mut _mallocmemory_t,
    pub mafreelist: *mut _mallocmemory_t,
    pub free_stacks: [mmtk_small_arraylist_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_thread_heap_common_t"]
        [::std::mem::size_of::<mmtk_jl_thread_heap_common_t>() - 1168usize];
    ["Alignment of mmtk_jl_thread_heap_common_t"]
        [::std::mem::align_of::<mmtk_jl_thread_heap_common_t>() - 8usize];
    ["Offset of field: mmtk_jl_thread_heap_common_t::weak_refs"]
        [::std::mem::offset_of!(mmtk_jl_thread_heap_common_t, weak_refs) - 0usize];
    ["Offset of field: mmtk_jl_thread_heap_common_t::live_tasks"]
        [::std::mem::offset_of!(mmtk_jl_thread_heap_common_t, live_tasks) - 64usize];
    ["Offset of field: mmtk_jl_thread_heap_common_t::mallocarrays"]
        [::std::mem::offset_of!(mmtk_jl_thread_heap_common_t, mallocarrays) - 128usize];
    ["Offset of field: mmtk_jl_thread_heap_common_t::mafreelist"]
        [::std::mem::offset_of!(mmtk_jl_thread_heap_common_t, mafreelist) - 136usize];
    ["Offset of field: mmtk_jl_thread_heap_common_t::free_stacks"]
        [::std::mem::offset_of!(mmtk_jl_thread_heap_common_t, free_stacks) - 144usize];
};
pub type mmtk_jl_thread_t = pthread_t;
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_ws_queue_t {
    pub top: u64,
    pub __bindgen_padding_0: [u64; 7usize],
    pub bottom: u64,
    pub __bindgen_padding_1: [u64; 7usize],
    pub array: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_ws_queue_t"][::std::mem::size_of::<mmtk_ws_queue_t>() - 192usize];
    ["Alignment of mmtk_ws_queue_t"][::std::mem::align_of::<mmtk_ws_queue_t>() - 64usize];
    ["Offset of field: mmtk_ws_queue_t::top"]
        [::std::mem::offset_of!(mmtk_ws_queue_t, top) - 0usize];
    ["Offset of field: mmtk_ws_queue_t::bottom"]
        [::std::mem::offset_of!(mmtk_ws_queue_t, bottom) - 64usize];
    ["Offset of field: mmtk_ws_queue_t::array"]
        [::std::mem::offset_of!(mmtk_ws_queue_t, array) - 128usize];
};
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_markqueue_t {
    pub chunk_queue: mmtk_ws_queue_t,
    pub ptr_queue: mmtk_ws_queue_t,
    pub reclaim_set: mmtk_arraylist_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_gc_markqueue_t"][::std::mem::size_of::<mmtk_jl_gc_markqueue_t>() - 640usize];
    ["Alignment of mmtk_jl_gc_markqueue_t"]
        [::std::mem::align_of::<mmtk_jl_gc_markqueue_t>() - 64usize];
    ["Offset of field: mmtk_jl_gc_markqueue_t::chunk_queue"]
        [::std::mem::offset_of!(mmtk_jl_gc_markqueue_t, chunk_queue) - 0usize];
    ["Offset of field: mmtk_jl_gc_markqueue_t::ptr_queue"]
        [::std::mem::offset_of!(mmtk_jl_gc_markqueue_t, ptr_queue) - 192usize];
    ["Offset of field: mmtk_jl_gc_markqueue_t::reclaim_set"]
        [::std::mem::offset_of!(mmtk_jl_gc_markqueue_t, reclaim_set) - 384usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_page_stack_t {
    pub bottom: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_gc_page_stack_t"][::std::mem::size_of::<mmtk_jl_gc_page_stack_t>() - 8usize];
    ["Alignment of mmtk_jl_gc_page_stack_t"]
        [::std::mem::align_of::<mmtk_jl_gc_page_stack_t>() - 8usize];
    ["Offset of field: mmtk_jl_gc_page_stack_t::bottom"]
        [::std::mem::offset_of!(mmtk_jl_gc_page_stack_t, bottom) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_mark_cache_t {
    pub perm_scanned_bytes: usize,
    pub scanned_bytes: usize,
    pub nbig_obj: usize,
    pub big_obj: [*mut ::std::os::raw::c_void; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_gc_mark_cache_t"]
        [::std::mem::size_of::<mmtk_jl_gc_mark_cache_t>() - 8216usize];
    ["Alignment of mmtk_jl_gc_mark_cache_t"]
        [::std::mem::align_of::<mmtk_jl_gc_mark_cache_t>() - 8usize];
    ["Offset of field: mmtk_jl_gc_mark_cache_t::perm_scanned_bytes"]
        [::std::mem::offset_of!(mmtk_jl_gc_mark_cache_t, perm_scanned_bytes) - 0usize];
    ["Offset of field: mmtk_jl_gc_mark_cache_t::scanned_bytes"]
        [::std::mem::offset_of!(mmtk_jl_gc_mark_cache_t, scanned_bytes) - 8usize];
    ["Offset of field: mmtk_jl_gc_mark_cache_t::nbig_obj"]
        [::std::mem::offset_of!(mmtk_jl_gc_mark_cache_t, nbig_obj) - 16usize];
    ["Offset of field: mmtk_jl_gc_mark_cache_t::big_obj"]
        [::std::mem::offset_of!(mmtk_jl_gc_mark_cache_t, big_obj) - 24usize];
};
#[repr(C)]
pub struct mmtk_jl_gc_tls_states_t {
    pub mmtk_mutator: MMTkMutatorContext,
    pub malloc_sz_since_last_poll: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_gc_tls_states_t"]
        [::std::mem::size_of::<mmtk_jl_gc_tls_states_t>() - 704usize];
    ["Alignment of mmtk_jl_gc_tls_states_t"]
        [::std::mem::align_of::<mmtk_jl_gc_tls_states_t>() - 8usize];
    ["Offset of field: mmtk_jl_gc_tls_states_t::mmtk_mutator"]
        [::std::mem::offset_of!(mmtk_jl_gc_tls_states_t, mmtk_mutator) - 0usize];
    ["Offset of field: mmtk_jl_gc_tls_states_t::malloc_sz_since_last_poll"]
        [::std::mem::offset_of!(mmtk_jl_gc_tls_states_t, malloc_sz_since_last_poll) - 696usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_gc_tls_states_common_t {
    pub heap: mmtk_jl_thread_heap_common_t,
    pub gc_num: mmtk_jl_thread_gc_num_common_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_gc_tls_states_common_t"]
        [::std::mem::size_of::<mmtk_jl_gc_tls_states_common_t>() - 1232usize];
    ["Alignment of mmtk_jl_gc_tls_states_common_t"]
        [::std::mem::align_of::<mmtk_jl_gc_tls_states_common_t>() - 8usize];
    ["Offset of field: mmtk_jl_gc_tls_states_common_t::heap"]
        [::std::mem::offset_of!(mmtk_jl_gc_tls_states_common_t, heap) - 0usize];
    ["Offset of field: mmtk_jl_gc_tls_states_common_t::gc_num"]
        [::std::mem::offset_of!(mmtk_jl_gc_tls_states_common_t, gc_num) - 1168usize];
};
#[repr(C)]
pub struct mmtk__jl_tls_states_t {
    pub tid: i16,
    pub threadpoolid: i8,
    pub rngseed: u64,
    pub safepoint: u64,
    pub sleep_check_state: u8,
    pub gc_state: u8,
    pub in_pure_callback: i16,
    pub in_finalizer: i16,
    pub disable_gc: i16,
    pub finalizers_inhibited: ::std::os::raw::c_int,
    pub gc_tls: mmtk_jl_gc_tls_states_t,
    pub gc_tls_common: mmtk_jl_gc_tls_states_common_t,
    pub defer_signal: sig_atomic_t,
    pub current_task: u64,
    pub next_task: *mut mmtk__jl_task_t,
    pub previous_task: *mut mmtk__jl_task_t,
    pub root_task: *mut mmtk__jl_task_t,
    pub timing_stack: *mut ::std::os::raw::c_void,
    pub stackbase: *mut ::std::os::raw::c_void,
    pub stacksize: usize,
    pub sig_exception: *mut mmtk_jl_value_t,
    pub bt_data: *mut mmtk__jl_bt_element_t,
    pub bt_size: usize,
    pub profiling_bt_buffer: *mut mmtk__jl_bt_element_t,
    pub signal_request: u32,
    pub io_wait: sig_atomic_t,
    pub signal_stack: *mut ::std::os::raw::c_void,
    pub signal_stack_size: usize,
    pub system_id: mmtk_jl_thread_t,
    pub suspend_count: u16,
    pub finalizers: mmtk_arraylist_t,
    pub previous_exception: *mut _jl_value_t,
    pub locks: mmtk_small_arraylist_t,
    pub engine_nqueued: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_tls_states_t"][::std::mem::size_of::<mmtk__jl_tls_states_t>() - 2448usize];
    ["Alignment of mmtk__jl_tls_states_t"]
        [::std::mem::align_of::<mmtk__jl_tls_states_t>() - 8usize];
    ["Offset of field: mmtk__jl_tls_states_t::tid"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, tid) - 0usize];
    ["Offset of field: mmtk__jl_tls_states_t::threadpoolid"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, threadpoolid) - 2usize];
    ["Offset of field: mmtk__jl_tls_states_t::rngseed"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, rngseed) - 8usize];
    ["Offset of field: mmtk__jl_tls_states_t::safepoint"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, safepoint) - 16usize];
    ["Offset of field: mmtk__jl_tls_states_t::sleep_check_state"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, sleep_check_state) - 24usize];
    ["Offset of field: mmtk__jl_tls_states_t::gc_state"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, gc_state) - 25usize];
    ["Offset of field: mmtk__jl_tls_states_t::in_pure_callback"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, in_pure_callback) - 26usize];
    ["Offset of field: mmtk__jl_tls_states_t::in_finalizer"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, in_finalizer) - 28usize];
    ["Offset of field: mmtk__jl_tls_states_t::disable_gc"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, disable_gc) - 30usize];
    ["Offset of field: mmtk__jl_tls_states_t::finalizers_inhibited"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, finalizers_inhibited) - 32usize];
    ["Offset of field: mmtk__jl_tls_states_t::gc_tls"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, gc_tls) - 40usize];
    ["Offset of field: mmtk__jl_tls_states_t::gc_tls_common"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, gc_tls_common) - 744usize];
    ["Offset of field: mmtk__jl_tls_states_t::defer_signal"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, defer_signal) - 1976usize];
    ["Offset of field: mmtk__jl_tls_states_t::current_task"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, current_task) - 1984usize];
    ["Offset of field: mmtk__jl_tls_states_t::next_task"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, next_task) - 1992usize];
    ["Offset of field: mmtk__jl_tls_states_t::previous_task"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, previous_task) - 2000usize];
    ["Offset of field: mmtk__jl_tls_states_t::root_task"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, root_task) - 2008usize];
    ["Offset of field: mmtk__jl_tls_states_t::timing_stack"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, timing_stack) - 2016usize];
    ["Offset of field: mmtk__jl_tls_states_t::stackbase"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, stackbase) - 2024usize];
    ["Offset of field: mmtk__jl_tls_states_t::stacksize"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, stacksize) - 2032usize];
    ["Offset of field: mmtk__jl_tls_states_t::sig_exception"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, sig_exception) - 2040usize];
    ["Offset of field: mmtk__jl_tls_states_t::bt_data"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, bt_data) - 2048usize];
    ["Offset of field: mmtk__jl_tls_states_t::bt_size"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, bt_size) - 2056usize];
    ["Offset of field: mmtk__jl_tls_states_t::profiling_bt_buffer"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, profiling_bt_buffer) - 2064usize];
    ["Offset of field: mmtk__jl_tls_states_t::signal_request"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, signal_request) - 2072usize];
    ["Offset of field: mmtk__jl_tls_states_t::io_wait"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, io_wait) - 2076usize];
    ["Offset of field: mmtk__jl_tls_states_t::signal_stack"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, signal_stack) - 2080usize];
    ["Offset of field: mmtk__jl_tls_states_t::signal_stack_size"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, signal_stack_size) - 2088usize];
    ["Offset of field: mmtk__jl_tls_states_t::system_id"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, system_id) - 2096usize];
    ["Offset of field: mmtk__jl_tls_states_t::suspend_count"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, suspend_count) - 2104usize];
    ["Offset of field: mmtk__jl_tls_states_t::finalizers"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, finalizers) - 2112usize];
    ["Offset of field: mmtk__jl_tls_states_t::previous_exception"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, previous_exception) - 2368usize];
    ["Offset of field: mmtk__jl_tls_states_t::locks"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, locks) - 2376usize];
    ["Offset of field: mmtk__jl_tls_states_t::engine_nqueued"]
        [::std::mem::offset_of!(mmtk__jl_tls_states_t, engine_nqueued) - 2440usize];
};
pub type mmtk_jl_tls_states_t = mmtk__jl_tls_states_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_task_t {
    pub next: *mut ::std::os::raw::c_void,
    pub queue: *mut ::std::os::raw::c_void,
    pub tls: *mut ::std::os::raw::c_void,
    pub donenotify: *mut ::std::os::raw::c_void,
    pub result: *mut ::std::os::raw::c_void,
    pub scope: *mut ::std::os::raw::c_void,
    pub start: *mut ::std::os::raw::c_void,
    pub rngState: [u64; 5usize],
    pub _state: u8,
    pub sticky: u8,
    pub _isexception: u8,
    pub priority: u16,
    pub tid: u16,
    pub threadpoolid: i8,
    pub reentrant_timing: u8,
    pub gcstack: *mut mmtk_jl_gcframe_t,
    pub world_age: usize,
    pub ptls: *mut ::std::os::raw::c_void,
    pub excstack: *mut mmtk_jl_excstack_t,
    pub eh: *mut ::std::os::raw::c_void,
    pub ctx: mmtk_jl_ucontext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_task_t"][::std::mem::size_of::<mmtk__jl_task_t>() - 184usize];
    ["Alignment of mmtk__jl_task_t"][::std::mem::align_of::<mmtk__jl_task_t>() - 8usize];
    ["Offset of field: mmtk__jl_task_t::next"]
        [::std::mem::offset_of!(mmtk__jl_task_t, next) - 0usize];
    ["Offset of field: mmtk__jl_task_t::queue"]
        [::std::mem::offset_of!(mmtk__jl_task_t, queue) - 8usize];
    ["Offset of field: mmtk__jl_task_t::tls"]
        [::std::mem::offset_of!(mmtk__jl_task_t, tls) - 16usize];
    ["Offset of field: mmtk__jl_task_t::donenotify"]
        [::std::mem::offset_of!(mmtk__jl_task_t, donenotify) - 24usize];
    ["Offset of field: mmtk__jl_task_t::result"]
        [::std::mem::offset_of!(mmtk__jl_task_t, result) - 32usize];
    ["Offset of field: mmtk__jl_task_t::scope"]
        [::std::mem::offset_of!(mmtk__jl_task_t, scope) - 40usize];
    ["Offset of field: mmtk__jl_task_t::start"]
        [::std::mem::offset_of!(mmtk__jl_task_t, start) - 48usize];
    ["Offset of field: mmtk__jl_task_t::rngState"]
        [::std::mem::offset_of!(mmtk__jl_task_t, rngState) - 56usize];
    ["Offset of field: mmtk__jl_task_t::_state"]
        [::std::mem::offset_of!(mmtk__jl_task_t, _state) - 96usize];
    ["Offset of field: mmtk__jl_task_t::sticky"]
        [::std::mem::offset_of!(mmtk__jl_task_t, sticky) - 97usize];
    ["Offset of field: mmtk__jl_task_t::_isexception"]
        [::std::mem::offset_of!(mmtk__jl_task_t, _isexception) - 98usize];
    ["Offset of field: mmtk__jl_task_t::priority"]
        [::std::mem::offset_of!(mmtk__jl_task_t, priority) - 100usize];
    ["Offset of field: mmtk__jl_task_t::tid"]
        [::std::mem::offset_of!(mmtk__jl_task_t, tid) - 102usize];
    ["Offset of field: mmtk__jl_task_t::threadpoolid"]
        [::std::mem::offset_of!(mmtk__jl_task_t, threadpoolid) - 104usize];
    ["Offset of field: mmtk__jl_task_t::reentrant_timing"]
        [::std::mem::offset_of!(mmtk__jl_task_t, reentrant_timing) - 105usize];
    ["Offset of field: mmtk__jl_task_t::gcstack"]
        [::std::mem::offset_of!(mmtk__jl_task_t, gcstack) - 112usize];
    ["Offset of field: mmtk__jl_task_t::world_age"]
        [::std::mem::offset_of!(mmtk__jl_task_t, world_age) - 120usize];
    ["Offset of field: mmtk__jl_task_t::ptls"]
        [::std::mem::offset_of!(mmtk__jl_task_t, ptls) - 128usize];
    ["Offset of field: mmtk__jl_task_t::excstack"]
        [::std::mem::offset_of!(mmtk__jl_task_t, excstack) - 136usize];
    ["Offset of field: mmtk__jl_task_t::eh"]
        [::std::mem::offset_of!(mmtk__jl_task_t, eh) - 144usize];
    ["Offset of field: mmtk__jl_task_t::ctx"]
        [::std::mem::offset_of!(mmtk__jl_task_t, ctx) - 152usize];
};
pub type mmtk_jl_task_t = mmtk__jl_task_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmtk_jl_weakref_t {
    pub value: *mut mmtk_jl_value_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk_jl_weakref_t"][::std::mem::size_of::<mmtk_jl_weakref_t>() - 8usize];
    ["Alignment of mmtk_jl_weakref_t"][::std::mem::align_of::<mmtk_jl_weakref_t>() - 8usize];
    ["Offset of field: mmtk_jl_weakref_t::value"]
        [::std::mem::offset_of!(mmtk_jl_weakref_t, value) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmtk___jl_purity_overrides_t {
    pub overrides: mmtk___jl_purity_overrides_t__bindgen_ty_1,
    pub bits: u16,
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct mmtk___jl_purity_overrides_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk___jl_purity_overrides_t__bindgen_ty_1"]
        [::std::mem::size_of::<mmtk___jl_purity_overrides_t__bindgen_ty_1>() - 2usize];
    ["Alignment of mmtk___jl_purity_overrides_t__bindgen_ty_1"]
        [::std::mem::align_of::<mmtk___jl_purity_overrides_t__bindgen_ty_1>() - 2usize];
};
impl mmtk___jl_purity_overrides_t__bindgen_ty_1 {
    #[inline]
    pub fn ipo_consistent(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_consistent(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_effect_free(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_effect_free(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_nothrow(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_nothrow(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_terminates_globally(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_terminates_globally(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_terminates_locally(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_terminates_locally(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_notaskstate(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_notaskstate(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_inaccessiblememonly(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_inaccessiblememonly(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_noub(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_noub(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_noub_if_noinbounds(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_noub_if_noinbounds(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ipo_consistent_overlay(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ipo_consistent_overlay(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ipo_consistent: u16,
        ipo_effect_free: u16,
        ipo_nothrow: u16,
        ipo_terminates_globally: u16,
        ipo_terminates_locally: u16,
        ipo_notaskstate: u16,
        ipo_inaccessiblememonly: u16,
        ipo_noub: u16,
        ipo_noub_if_noinbounds: u16,
        ipo_consistent_overlay: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ipo_consistent: u16 = unsafe { ::std::mem::transmute(ipo_consistent) };
            ipo_consistent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ipo_effect_free: u16 = unsafe { ::std::mem::transmute(ipo_effect_free) };
            ipo_effect_free as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ipo_nothrow: u16 = unsafe { ::std::mem::transmute(ipo_nothrow) };
            ipo_nothrow as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let ipo_terminates_globally: u16 =
                unsafe { ::std::mem::transmute(ipo_terminates_globally) };
            ipo_terminates_globally as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let ipo_terminates_locally: u16 =
                unsafe { ::std::mem::transmute(ipo_terminates_locally) };
            ipo_terminates_locally as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let ipo_notaskstate: u16 = unsafe { ::std::mem::transmute(ipo_notaskstate) };
            ipo_notaskstate as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let ipo_inaccessiblememonly: u16 =
                unsafe { ::std::mem::transmute(ipo_inaccessiblememonly) };
            ipo_inaccessiblememonly as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let ipo_noub: u16 = unsafe { ::std::mem::transmute(ipo_noub) };
            ipo_noub as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let ipo_noub_if_noinbounds: u16 =
                unsafe { ::std::mem::transmute(ipo_noub_if_noinbounds) };
            ipo_noub_if_noinbounds as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let ipo_consistent_overlay: u16 =
                unsafe { ::std::mem::transmute(ipo_consistent_overlay) };
            ipo_consistent_overlay as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk___jl_purity_overrides_t"]
        [::std::mem::size_of::<mmtk___jl_purity_overrides_t>() - 2usize];
    ["Alignment of mmtk___jl_purity_overrides_t"]
        [::std::mem::align_of::<mmtk___jl_purity_overrides_t>() - 2usize];
    ["Offset of field: mmtk___jl_purity_overrides_t::overrides"]
        [::std::mem::offset_of!(mmtk___jl_purity_overrides_t, overrides) - 0usize];
    ["Offset of field: mmtk___jl_purity_overrides_t::bits"]
        [::std::mem::offset_of!(mmtk___jl_purity_overrides_t, bits) - 0usize];
};
pub type mmtk__jl_purity_overrides_t = mmtk___jl_purity_overrides_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmtk__jl_method_t {
    pub name: *mut ::std::os::raw::c_void,
    pub module: *mut mmtk__jl_module_t,
    pub file: *mut ::std::os::raw::c_void,
    pub line: i32,
    pub primary_world: usize,
    pub deleted_world: usize,
    pub sig: *mut ::std::os::raw::c_void,
    pub specializations: u64,
    pub speckeyset: u64,
    pub slot_syms: *mut ::std::os::raw::c_void,
    pub external_mt: *mut ::std::os::raw::c_void,
    pub source: *mut ::std::os::raw::c_void,
    pub debuginfo: *mut ::std::os::raw::c_void,
    pub unspecialized: u64,
    pub generator: *mut ::std::os::raw::c_void,
    pub roots: *mut ::std::os::raw::c_void,
    pub root_blocks: *mut ::std::os::raw::c_void,
    pub nroots_sysimg: i32,
    pub ccallable: *mut ::std::os::raw::c_void,
    pub invokes: u64,
    pub recursion_relation: *mut ::std::os::raw::c_void,
    pub nargs: u32,
    pub called: u32,
    pub nospecialize: u32,
    pub nkw: u32,
    pub isva: u8,
    pub is_for_opaque_closure: u8,
    pub nospecializeinfer: u8,
    pub constprop: u8,
    pub max_varargs: u8,
    pub purity: mmtk__jl_purity_overrides_t,
    pub writelock: mmtk_jl_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmtk__jl_method_t"][::std::mem::size_of::<mmtk__jl_method_t>() - 208usize];
    ["Alignment of mmtk__jl_method_t"][::std::mem::align_of::<mmtk__jl_method_t>() - 8usize];
    ["Offset of field: mmtk__jl_method_t::name"]
        [::std::mem::offset_of!(mmtk__jl_method_t, name) - 0usize];
    ["Offset of field: mmtk__jl_method_t::module"]
        [::std::mem::offset_of!(mmtk__jl_method_t, module) - 8usize];
    ["Offset of field: mmtk__jl_method_t::file"]
        [::std::mem::offset_of!(mmtk__jl_method_t, file) - 16usize];
    ["Offset of field: mmtk__jl_method_t::line"]
        [::std::mem::offset_of!(mmtk__jl_method_t, line) - 24usize];
    ["Offset of field: mmtk__jl_method_t::primary_world"]
        [::std::mem::offset_of!(mmtk__jl_method_t, primary_world) - 32usize];
    ["Offset of field: mmtk__jl_method_t::deleted_world"]
        [::std::mem::offset_of!(mmtk__jl_method_t, deleted_world) - 40usize];
    ["Offset of field: mmtk__jl_method_t::sig"]
        [::std::mem::offset_of!(mmtk__jl_method_t, sig) - 48usize];
    ["Offset of field: mmtk__jl_method_t::specializations"]
        [::std::mem::offset_of!(mmtk__jl_method_t, specializations) - 56usize];
    ["Offset of field: mmtk__jl_method_t::speckeyset"]
        [::std::mem::offset_of!(mmtk__jl_method_t, speckeyset) - 64usize];
    ["Offset of field: mmtk__jl_method_t::slot_syms"]
        [::std::mem::offset_of!(mmtk__jl_method_t, slot_syms) - 72usize];
    ["Offset of field: mmtk__jl_method_t::external_mt"]
        [::std::mem::offset_of!(mmtk__jl_method_t, external_mt) - 80usize];
    ["Offset of field: mmtk__jl_method_t::source"]
        [::std::mem::offset_of!(mmtk__jl_method_t, source) - 88usize];
    ["Offset of field: mmtk__jl_method_t::debuginfo"]
        [::std::mem::offset_of!(mmtk__jl_method_t, debuginfo) - 96usize];
    ["Offset of field: mmtk__jl_method_t::unspecialized"]
        [::std::mem::offset_of!(mmtk__jl_method_t, unspecialized) - 104usize];
    ["Offset of field: mmtk__jl_method_t::generator"]
        [::std::mem::offset_of!(mmtk__jl_method_t, generator) - 112usize];
    ["Offset of field: mmtk__jl_method_t::roots"]
        [::std::mem::offset_of!(mmtk__jl_method_t, roots) - 120usize];
    ["Offset of field: mmtk__jl_method_t::root_blocks"]
        [::std::mem::offset_of!(mmtk__jl_method_t, root_blocks) - 128usize];
    ["Offset of field: mmtk__jl_method_t::nroots_sysimg"]
        [::std::mem::offset_of!(mmtk__jl_method_t, nroots_sysimg) - 136usize];
    ["Offset of field: mmtk__jl_method_t::ccallable"]
        [::std::mem::offset_of!(mmtk__jl_method_t, ccallable) - 144usize];
    ["Offset of field: mmtk__jl_method_t::invokes"]
        [::std::mem::offset_of!(mmtk__jl_method_t, invokes) - 152usize];
    ["Offset of field: mmtk__jl_method_t::recursion_relation"]
        [::std::mem::offset_of!(mmtk__jl_method_t, recursion_relation) - 160usize];
    ["Offset of field: mmtk__jl_method_t::nargs"]
        [::std::mem::offset_of!(mmtk__jl_method_t, nargs) - 168usize];
    ["Offset of field: mmtk__jl_method_t::called"]
        [::std::mem::offset_of!(mmtk__jl_method_t, called) - 172usize];
    ["Offset of field: mmtk__jl_method_t::nospecialize"]
        [::std::mem::offset_of!(mmtk__jl_method_t, nospecialize) - 176usize];
    ["Offset of field: mmtk__jl_method_t::nkw"]
        [::std::mem::offset_of!(mmtk__jl_method_t, nkw) - 180usize];
    ["Offset of field: mmtk__jl_method_t::isva"]
        [::std::mem::offset_of!(mmtk__jl_method_t, isva) - 184usize];
    ["Offset of field: mmtk__jl_method_t::is_for_opaque_closure"]
        [::std::mem::offset_of!(mmtk__jl_method_t, is_for_opaque_closure) - 185usize];
    ["Offset of field: mmtk__jl_method_t::nospecializeinfer"]
        [::std::mem::offset_of!(mmtk__jl_method_t, nospecializeinfer) - 186usize];
    ["Offset of field: mmtk__jl_method_t::constprop"]
        [::std::mem::offset_of!(mmtk__jl_method_t, constprop) - 187usize];
    ["Offset of field: mmtk__jl_method_t::max_varargs"]
        [::std::mem::offset_of!(mmtk__jl_method_t, max_varargs) - 188usize];
    ["Offset of field: mmtk__jl_method_t::purity"]
        [::std::mem::offset_of!(mmtk__jl_method_t, purity) - 190usize];
    ["Offset of field: mmtk__jl_method_t::writelock"]
        [::std::mem::offset_of!(mmtk__jl_method_t, writelock) - 192usize];
};
pub type mmtk_jl_method_t = mmtk__jl_method_t;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_null_tag: mmtk_jl_small_typeof_tags = 0;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_typeofbottom_tag: mmtk_jl_small_typeof_tags = 1;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_datatype_tag: mmtk_jl_small_typeof_tags = 2;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_unionall_tag: mmtk_jl_small_typeof_tags = 3;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uniontype_tag: mmtk_jl_small_typeof_tags = 4;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_vararg_tag: mmtk_jl_small_typeof_tags = 5;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_tvar_tag: mmtk_jl_small_typeof_tags = 6;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_symbol_tag: mmtk_jl_small_typeof_tags = 7;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_module_tag: mmtk_jl_small_typeof_tags = 8;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_simplevector_tag: mmtk_jl_small_typeof_tags = 9;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_string_tag: mmtk_jl_small_typeof_tags = 10;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_task_tag: mmtk_jl_small_typeof_tags = 11;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_bool_tag: mmtk_jl_small_typeof_tags = 12;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_char_tag: mmtk_jl_small_typeof_tags = 13;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int16_tag: mmtk_jl_small_typeof_tags = 14;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int32_tag: mmtk_jl_small_typeof_tags = 15;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int64_tag: mmtk_jl_small_typeof_tags = 16;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_int8_tag: mmtk_jl_small_typeof_tags = 17;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint16_tag: mmtk_jl_small_typeof_tags = 18;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint32_tag: mmtk_jl_small_typeof_tags = 19;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint64_tag: mmtk_jl_small_typeof_tags = 20;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_uint8_tag: mmtk_jl_small_typeof_tags = 21;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_tags_count: mmtk_jl_small_typeof_tags = 22;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_bitstags_first: mmtk_jl_small_typeof_tags = 13;
pub const mmtk_jl_small_typeof_tags_mmtk_jl_max_tags: mmtk_jl_small_typeof_tags = 64;
pub type mmtk_jl_small_typeof_tags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mallocmemory_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jl_value_t {
    pub _address: u8,
}
